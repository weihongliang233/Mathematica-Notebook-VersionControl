(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    236842,       4281]
NotebookOptionsPosition[    232701,       4200]
NotebookOutlinePosition[    233191,       4218]
CellTagsIndexPosition[    233148,       4215]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\:6d4b\:8bd5", "Title",
 CellChangeTimes->{
  3.8094147802409644`*^9},ExpressionUUID->"a4411ce1-3e37-49a5-b2c1-\
15bffd1c22a5"],

Cell[CellGroupData[{

Cell["\:666e\:901a\:8ba1\:7b97", "Section",
 CellChangeTimes->{{3.8094147862319484`*^9, 
  3.8094147938495827`*^9}},ExpressionUUID->"8238c34c-7caf-4eb6-90a1-\
8456b8c740f5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", "+", "1"}]], "Input",
 CellChangeTimes->{{3.8094147440457277`*^9, 3.809414744518464*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"6601a62f-38ba-46e7-9b9e-0c06ad6c4baa"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.809414744958288*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"cb46ebed-b440-43e0-97b8-66d91e34c3fa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sin", "[", 
  RowBox[{"x", "+", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.8094147478565397`*^9, 3.8094147516634035`*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"4af6181a-7809-4ec1-ab6a-4d8fdd2cf214"],

Cell[BoxData[
 RowBox[{"Sin", "[", 
  RowBox[{"1", "+", "x"}], "]"}]], "Output",
 CellChangeTimes->{3.809414752207946*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"7f2ec30e-5ab9-48ea-a951-6ca47dc0b66d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:753b\:56fe", "Section",
 CellChangeTimes->{{3.809414800938632*^9, 
  3.809414802115485*^9}},ExpressionUUID->"da642f5d-f2ab-4e23-8fff-\
a25aa89a3747"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8094147537098927`*^9, 3.8094147612317853`*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"9ec20c51-cf17-4e7c-a190-7785223240d5"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.24720000000000014`, 0.24, 0.6], AbsoluteThickness[1], 
      Opacity[1.], LineBox[CompressedData["
1:eJw10H840wkAx/EpRXSK7qqFPCruYlJSSnd9XJFiEumkQ0v0Q5fyK5fL1S6/
EuEeT+ZCaeunJ6trPMpKaVfHs/zayo/WZrP24zt8p0IUbv64Pz7P6/n8+7aP
OhYcM41CoQQYNqVfjKbtiXbXxv813rzouIzqjoHS1tgpV19mld6nemNdYULW
lP4vO/4uo4Yg7LZX5JSh0SOP/qRGQzGz7EihwbeuWZvzqEl4Gr5kLMvglW8C
M3Oo6VAfa2QkG2Sa3v/2HLUI2aLxQneDu8MquPpBDn5K7pbE6zkwn2SG+y7m
Qu5pZcagcuEQNKB5dp6HRjtex+JMHlKa14P18QEYw5x4D+0DLOBZSo2M6hET
lpNY3v8YNYrNwpbvG5C8w3vAxKUBDbFl1mF9Asjn5tRmigUYcvxhzp2jLyCy
9gzcSH+BaaOVc60dmhA0mn3m1nAj1k4yanZWCcGe5ZNnFi+EMN29+blTC957
lk84SZphV6AbvTXQisyKeW0+/FboRmTSVyvbEfj409uo923gEHVNFhdEWBhn
45jlJYKF7Q1SqRSjauGoel+mGLmHqw9cWfYa1a7LB915rzDsVak8dLoD8kZ0
O4++RpKbgDf/WSfsWPIYG8dOyKoE59vsu8Hy9vY9ebgLn2PFl5anvoFo8F7d
bE43nH80mThQJ4H1740bmp+/ge9V+4P3Fkihyi61+DghQYrt3iXycBnou6Xn
I+2koPXtMu8I6AFlRsFBmocM8+boTQVjPVC6XH9wbVUPjOsvcZeWyjG25tpD
Y34PjrjXdc3yVyDJ349nvUOOym1RVx4PK0BrZ7GyZHIM6RbNVV3sha/b2ea0
/QpU7/SdXuStROimm6YFegVOb824zFMpYR9ydPq2hF7Yv/XrZGe8g116V24+
2QtPj/QiqpsKDjtnlgUnKxG+uGXUSKTCak3cQVO9EkNNeYrjTDW2UxSRtQnv
wDKOTApepsE/B+jFTOId5kmrr04TaDAuFlxoilBhRhozZH28FgwZzXlfpwqU
W5FchRWBihPFbse2qpHwFzfPqoGAh+SE+cZ6NR45Z5taxungSEq3rFilgaVf
Au0Piz48jTrLNirRQOLSKjrJ74N+6QdO90wt7pZjmTKyHzap4R+EsVpEcNda
2k4Yvp5soDdpcSajgim5PYAvPsXq+a4E7mhsL1nQSbQX0soScwhkl2UwpNtJ
pAoDy2bkEogO7neoCiLhTPtyqDiPgA2ffzcglETT+96ohwUEcvJ/fp4bRaJN
wuoZv0jg0NqSQbOTJKgpvZTf2ASWpH+91eQ6iS9VR+oD+AQm1p36quMmCaGm
1qnrEYGu/t7265UkrFpo+6LrCRSE3o/Yco+E29FTrqmGDpNOwYkZfBKzS2OC
2P8SkLTll08XkYhIq7mhExOozRzZL3pFwsTHSJD4mkDRhr3L2Z0kdlM3VX7u
IOB/bQVvk5QEvbmk2+wNgYe/vmxkakmMC+l8RzmBiy5r8oP6SJzZ88H1joJA
vKI0xJ4kYSZMiVutJPAd/RfZk48kqrdb0KEmYGwk5hSMkCjZs0gn0BDoqd4Q
yxgjYeH1KcSPIMCPZbuuHCeRNs4516IjUGxnPjQ5SaKm0PZcSD+B/wA2BX0d

       "]]},
     Annotation[#, "Charting`Private`Tag$788852#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  AxesStyle->Directive[
    GrayLevel[0], 
    AbsoluteThickness[0.2]],
  BaseStyle->Automatic,
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameStyle->Directive[
    GrayLevel[0], 
    AbsoluteThickness[0.2]],
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  FrameTicksStyle->GrayLevel[0],
  GridLines->{None, None},
  GridLinesStyle->Automatic,
  ImagePadding->All,
  LabelStyle->{FontFamily -> "Times"},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "PointSizeFunction" -> None, "ScalingFunctions" -> 
    None, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {0., 0.8414709737813186}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic},
  TicksStyle->GrayLevel[0]]], "Output",
 CellChangeTimes->{3.8094147618611345`*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"0f498764-77e7-464a-9033-6d0d19ef5072"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DensityPlot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"x", " ", "y"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.80941487820909*^9, 3.8094148858735695`*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"b9432938-895f-43d2-9dfb-0d727097fbaa"],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1:eJyNm01uHMcZhjnkUJxrBPY9epbxNkcIkF1inyW5htbRRkfwKoAWShogQGJA
UBiQkCdjUootM/b0PFV4n+oiLRgovP11V9X7/VcN/Yc/f/env5yenJz8++zk
5LfR/8Y3f/v1v++HxGPBX3/zj1//20i+Lfgg/voHvb8v+Onw77Hg/xy+/6ng
fx6W+6XgPx7mW6zB03ZOC57mXxZ8eP2bVwVP/1bClef8OBYM35RvC4Zvvr8v
GL5g+ILhC4YvGL45/7Jg+KbdVsLVjvM865h8R/EdxXcU31F8R/EdxXcU31F8
R/EdxXcU39ZP5+1YeXqELxi++d6+YPiC4QuGLxi+YPjm/MuC4ZtxtxKucTjv
p2PDK+V1TPtuZd+t7LuVfbey71b23cq+W9l3K/tuZd82z8zH4djYzbzAHuEL
hi8YvmD4guELhm/OvywYvpk3V8I1j87nmbHxS9vNvPL9OqY/7+XPe/nzXv68
lz/v5c97+fNe/tzWifk8OjZxZ7+03cwL7BG+YPiC4QuGb86/LBi+WfdWwrUO
wtd503nFcWe/tN3MC+wRvmD4guGb8y8Lhm/W9dW6V+fh67rgvOm84rizX9pu
5gX2CF8wfHP+ZcHwzb5lte71MfB13XNdcN50XnHc2S9tN/MCe4Rvzr8sGL7Z
l63WvT4Nvq7rrnuuC86bziuOO/ul7WZeYI/wBcMXDN/EtQ/N/Lxs+pjMz8um
DrpOOI86zzgO7ae2o3l6zPy8LHwT1z4bvonHpm9xXXfdc11w3nRecdzZL203
8wJ7hG9i/rmvdt/pvsx9i+u6657rgvOm84rjzn5pu5nXqhmn/b4dGKfv3w29
5x4n+fmR59UxP18UPO33y3H/t8PfDx+erMET/0XBBzpvzgpmfjDzgyd+D8d4
vx/+evjgc8GsD2Z9MOuDWR88jbsy5no7rbfTejuttyv78Dxgj8wPZn4w+nhe
D7tmHrBH+IPRP5j1wNjBerYevG8w+gezPpj1wazf86t5O1c7eGR9MOuDWR/M
+j0/tl+Zp9f1yPq9uLCf2m7Wo3l5Hfgkvmrizn5gu1hPYI+s18sbjnP7uf3Q
fmE7maf34ZF8d6J/PJ9/r+ZR1ic/5n6uih8gByNnv8h7dnH+pS6xP+S533FI
/V0NvTh2/qbOJb+N+GzU15jPRn2A+WxUN6/EZ1Pyh/M/dTfr5+2Q/lrPEeaL
POtrzSvIs97WuEee9bfGLfKsxzWuiOuszzUO5uvRfTn/WD59V8/BrjvIs3++
l3/Uc5bzOvLsr+/l77WPd140D++7xzP51rrM8+Rb6yry5FvrIvLku5P/72WP
nfxz3/VL6931Ovv8fdMfIM/+uPYJPM9+udZ55Phb7u+86UOdd5H38objzHLf
V7hP8/2F+xffZ7ifSflinbwXzbnJddPnDNc59+WuQ8mvzZvzeab2L/P3irWf
mr+Hq/0VcuIPeZ73vxT5/Dm59inz58raV8yfw2ofMH9uqXU652/rpOuM87D7
L9+XuB98SQ/P623R9I2+V3Bf53O4+zCfW903vdQnuO66Drl/zDy8K/LMv6fd
uLFfJM8v8qNF01fn+qdN38tz9MVz9JV90EWRZz4+7fZN7kMsZ130hxz9IUcf
yLN+1PuYtPOX5n4Gefp5va9BnnatfTRy/Cf7jPPmHsD6Q46+cv6x6cvA6It1
8R/kWf9edeuM8yo483q970Ge58h6/4Mcfb6kl54eGa1vnme/X88R+d1bnWf4
/arfl1vOOugfOfpHjv5zvVvJ2z4l4+hxSB4PzX0U8qzr9X4Keda1VTdO7Yfg
jLt6f5X6Oi9yxtTPRfMcO2Se5Xelei+f/uJ7vnfqFzeKm63sWvMwdYnvsr8Y
B+d//17geZwf0at5ZJ2o+S337XPsVv7wqvDPOnule/sr9T/te8zDvF8d8P+O
+OPxu8fj/v9bRp5P3+Nnj+U75pnWOS/z8j548ufT9S8HvVDnlwXzPXiy08ma
ke/BfA/mO78H9uh9eN7ku1ybp/ftke/B1qP15HU9j8dpv0/H/d8d9/Hp6E+7
o5/9WEae53vVXt8eXqSufBpyH5+KPP2GOvpz0SMYOXpiPeTwAyPnfdbL+e8G
eE/7WxQ9pN0tpy6dSW/LglNOf3te5L15e/vgOeNLz1mf5z099vTe49HjzTrI
savtZLv07Mj8yLEfGH+yPOOm9bOeX7K+1/G8vX3wnBE7TN9dFjtP+LroFUze
Jq6ZJ+t022elXldNHuD73NdPZX33tc5j2Qe4bztr+mS+B2PHzFt1Pv+u7Tjw
eS312Obl7Bvdly+acw3fZ32tdkp8WeIx/y7htNFL/o5/2l0n9/FU6iv77vGy
H6Uel107gPEb7J7n5dbu6Z9L9WPn+v2++iV+aj/M8+a5fvetcZb9jeNv1dQ1
v8e87Jf36Zddl5g3+0Ofsypvz2u9ZD/mvLXSvl8PjH7O/NN379UnXA4573vx
uiz9D36T+fxmyHx1PWQduSl+gRyMPPdzLbve6Bxzqf1dF8z7Wbc/DJmX7sr+
kWe/dVf2jzzj9E73ozdlffyC/fu+8Pm68WFwfwF23sCfXHfzPs91cKU6flP6
iNTDk+5vn6Qf588n6WchvSyKHjOP3hWMfcDJ0/doNe+yD9ZzPgPn/Ev1r8vi
V8QdfgVOP7Rdfc9Z++78vtZ95y3sg5z9ZR573cRp9heX6j8cx9dD5rUbfX/d
nKvYF3zdDzmvI0evma/bv0dxf+S8lnrh99fX0nPL23rJfrT65Xx+uhyyTl11
/QI5fuZ8htx6Bnv++XxX7eL5nO+Mp3luu3GO/KU8lOeQ225cez3yCPkBOfri
e7DnZ/30rw/q6z+oz7gt9wB8n+fl+yHz4Mchzw/30udH+U/FvJ/19kfVo4dm
H/Pr1nNH5u/P3Tr2e+3OenlP0OeZfePPTZ/6Ut7GP31+zr6t7SNeqsv2w55f
5n1NrV/0wX7Ofty3vNQH2K/9Pn5tPbKe+6Dfm4eYP/PqbTdO0h/PCj4s8+as
ydPO49P6F8rjbR+ZuO3jnBefz5OOg6fmvsv1Y4q/WnezrtR6y3u5/sXadSP1
dtP0xeRp9u/3kTsv5PnpojmH+5xku6V9Kub9rJ/8o46+L+eE3B+4vs/z1O+o
fDeWOJqeb3TvtNE9z6bMB2Y+MPalfjC/6wmY7/3/Rzi/5u8UV/o7j2vdq20a
TH7Jdevvr2mnd6XfRO/4IXrL+Nx04rX+PbL17r4HuzGf+w7k1CXm970R5xjn
AXixzx6v7FvHwXrPeG71/rxeraeN9rkZ8v5g29jNedN1Eb2gp8yPrZ74rtdn
sK7rs9ed97/q9/N1rI07xwnroUfqcC9OsZP1ZDs7jjNff27iDsz69hPngYyD
hybOwdQxx03m62v9vch7/Z78qL/rqucG+y35PPvwB/F5q9/Xvtfv5/8q+vw/
lvJ3pg==
    "], {
     {GrayLevel[0.8], EdgeForm[None], 
      GraphicsGroupBox[PolygonBox[CompressedData["
1:eJxVnHf812P3x9/D3lt2VkhW3faIxG03RUbjSyo0rIRki8hN4rZLRki4SfYo
s27cRvbee5PN7zy/5/l55PfH9Xif93mf67rO9R7XeZ3x+azeNKTr4Kooig7z
F0Udx/eicb5ktOWizRctLhXLRpvX8/eLlF0q2vJeXyDa0vLnidZC3oLR1ooB
ty2LYpWgV4y2ULSFo63gdc5XkrdItJU9LhptGcdj7lXkLRbtoRhzsxhz02hr
qx/6rqFe6LKmR8b4UP7q0Vopi+7rqiu6XBvKb13m/B94D1pG2zPattG2i7aO
/eizZZl6t462eZlrW4/1Oic6LRN6to9rqwa9Y7R20f4RbdMi9W7l+Vqeb6KO
rGOHMufbLFpbeazphtBzxzJ13yjaaup5QszVKtpW3JM4blGmPkuH/FLR/hnn
y8dxelzbtUxd1nTulYP/SPB3L3OdGzr2nmXq2hF91A9dOnhkjO2jbey1TiHf
oUyd14oxH4sxu8X5f+PYM45fBL+9Y29sa+maVwv5VaN1Cbn/xHFm9NmHdQb9
RNB7B31JtH9HGxHyzwRv/6C/DHp0tOO5B4wZ8htFa4prfaJ9pf6d1ZV13B7X
n43+B8f1LvJY0/PBOyR43wZ9WLT9ox0Q7ftou0bbN9rskBkQMt8FvV8cd4tj
T+SC3h1etF5BH1jmM6f/Hr5HB3rcK9oRcX1OHLszV9CHqsugOP4Qx67RenNP
1f2o4P8Ux72jDQx6nzgeEu2YMuccyLyO3cnW3jX/HK1HtH7RBrgOdO5f5Dj7
2m87+xyu3uhbxfhHxvGUaH9EOxhdop0U/N/jeFC044L+JY59oh2tDHOdEPxf
49gXPeWh8yDHRt874lmcUqZew7yOXpsHf7Nop5X5bA/1mZwY57/FscnnfZj6
rhDP5Ywyxz61SJ3R85zgFdGGxmFMHMtoRwR9dhz/iuOQaKcpi+4XBL8uU5ez
WZvv1qjgnRltcNDD43hsmc/nX2Wu7XTGCR32iHZR8LYO3beKdmHQQ6L9GNe7
RXstrl8a5/NFOyGuzxdtoeBNiPPxZepygfebdVwZvAWincR7zLcfbWKcLxjt
ZOZHt+jfKdq1fB9xfDCOD0R7Negb4rhotHOD7hrter6j6HOW61sxeDeV+Q2d
X+SYzP1szDM22s1x7b2QmRLHxaJ1Dl6naFODvirkzlOH8R4ZY4ky+VdGG8t3
HG1a8N6O471xXIZ9Nuj743hpyHSI8W4NevFonwT/oTgux3sd9N1xXDrapJD7
d5G6LxvnF8fxumi3s1+Uec9WCfnlg76C9zzoV4NuyXnQvaI9EfQU9UL3R+P8
kTJ17xvXZ7KPR/ss6Mfi2IK9i30+2jUhc3Xwnwv62WhPlzn/1GirBf9/cX4D
OsRxchzvjXZf0NfyjvOdxRpfYN3R7itS5uZou0ff04M3b7TXo63OeoL/InYj
2i1BXxMy/aK9HOdPRbs9eNOjvRX0m2WO3zfG7xPtHd7LOK4e8msF/VzQl0R7
P+jpZa6deV8J3svRpgV9vzzuzffR74OQWzPalnH98jjOH+2jMtc0M9qnPKcy
+w0OmZ+iz/fsm9G+KVO3QcH7IuhW6Bv0EdF+ZD+Otk60h0Lmpzg+FsfZRWIL
7DJ2EyDxe1xrHe2P6Pcr+ws6Bb1+HJ8MkT/L1OWVaG8E/XAc/8enDoCJNisO
z/OtRKt476INj7ZItI1C/pm4/ma0BeN8gSr7DuJ7DHpD9pg4LhatbZmYZ8kc
thmLNNt29otgzBNtg5A5LI6fxXHtaP8oE0stUSR+QbaBjziCRWY13pEiMdTy
rv+6OrEImAl8A+4B84B9oMEnYCbwBrgFrLKac4GhVvIamKeleoPFWjhHAxs1
sBLH1dVxLa+xvrU9b2CyldSvldcYax3PF6sT54F1wEXrqQN4qrV9wUjrqjP6
ggE2dG6ww8bOBx5qp77rOseC9mvhmja2/5rKNvBRW8finb6+yD0DXTd1XHDT
Zo7J3Ng7sN0KoX+LOnHRiCrxEziKOdord6L4apsy59/ea2CMr4vc2xvYaAf1
2EE5dNzRa2CqHdVn2ZhzGbEZuKmjuq5RJ5b6RP3ADGCI1sFfr04stGEcN6gT
I7WK49p1Yi103cs+zA12AAuAScBC4IrVQ7alWAtbjd07yvV0sj/4pcvf1tPF
scBxYC5wT9sYYxOxFlgJW3xoMRfrNLAPR66Dm8BS+zhHL+XAUWCQXZ2/t9c2
jbH/USdOAyOBi/oUiZV6qw94Cdvat0g7C6YCG4DHeqonWAvsBFYBR4GHDlav
w9Wb+cEgYA8wFXRPdYV3iLoOsg8YAMwDHgCTgIXAFWAzcA54Cyz5nTR4YZDr
AheBYcAkYCcwEjjkxjrxPdgdfAXeAsdcGe9dk/YLjHPC3/SGBp+AoYapK1gI
rAJOnlonxvoz6C3qxDHgnvHaTDAGGAlcBMYAF4GXRhaJl8B/J6sHsqf4jJnz
ON+b07wGFjrN9wmcPlr9Tgp99qwSC9EH3AH+2K1KvDUP722d+B5chM0B84xx
PvQEV4DLwFnH+DyGSW9bJ6aaX12RBYuAncBJYJF+yqLbTnXirYWiXVIlFgEv
7SbeAeeAiyaXiU924RutEzvtUScWAquwBvAIuAT8Au4Be5wRfTtXidMa2KiB
lThig8Es49W1S504Zskysdgl3qN/xRj7Vom1LsTfEUd1qxPjgZGYm32O/Q48
NUmdwFngJPDH3nViKrARc2Pnsfe9xTkrlImzwGXgnLPw28STYCpwA3hl3zox
E7gI3DTF9eCrsm9hC8BQ4CUwTIsq33++IbAP2OieoPerE0eBhdCb/frOIufA
HmIXwVPTXBu63u818AW2+mHegSpx0mplYqX7Xdu1wR8oXgIDgqnAG/vXidXA
b2AtsBTjgKGmF4mrwE1gHTAGGOm9MjHKIWIocBG46VF1RldsOVjksDqxERgA
nAMuAWc01YnV1kB3cLh7Oxhqlus6vE68BDaaHDKDxRMD6sRjYLkhdWKsdcu0
69h+7D7A5BV1ACOBjV4uEjOBrdB/eJ3YqE3wjqoTU4GvjqkSH4Fhbo3jkWK5
+cRJb/Cd14lzwEVgJXAT6xpRJ37aOPhHi9nAZ/cE77gq/ZqRwT+xTty1mjq3
LBILvV/MjTdBL+V63pPH+YfSi0aH7WLsj4J+Gj8r6I+DfjDodmX2+T3on8vE
lS3tu3q0xaPv9srPCpndGuOUiZ35Rjr6TMAHYH6wO+/DinXKE7toE/S+QX+O
TkHvHPRnQS9X5XVszQtB95C/Sp16Yi+PLNM2YYP2KtMWgwOWr/I6sYO+8sES
ncvEFWCC5WKcXZy3dcgf5LU163yXvilSL2zrLtH6lxnDwO6sX6c+fIc7R9/u
XuObRB67N7hM29o32j8dH13bRd9+jv+cfT9l31AeTLB+8IeW2mCPYIwlou9O
yjMG9pdYx8gybQ22r030HVGm/RvssU+RthkbzZ69i+NjLw8v0+b2dhx42Nyj
HZ9+J5dpi4/0nkM3KfOH959r0Niu4x0T+zusTDuJ7d9Av4zz89T55KB3VWds
5LkesZvTYr0bxrXRZeqA3UQ3bBR2C9uzUVwfV6a9Y17s8GCfF+sltsMc9D0l
jqcqyxhjyxznjKD/HXO9qu+2cYx5cZn+4z3B2ybaZWXqvKC6XVWmPcX+3BXX
X1dPzpHBRu3ANxLtijg/v0zbiC3fLGTvKdMH36tKPRaOtknQ1yg3Gj8p2nXo
HccurvNc5wVLtAvepKAXidZdnYlLoBt2E1u/Z8y/e7Rb4vxecG6V+rQP+t0q
14V9RR479gD4MPh3xvk5ceypDjc6NjGCg7knwX83zq8u08aCJy4K3qbR7orz
Hq5lqWi3lWnbmecAdcYu4odjY7AvM8q0pdirT6vswzn7CDaXuMAdZdpJbPxe
ocPHVa5retCbB/140CtVOTb9xge9RbQnuf9xPNB1XRzHPuq5ZRxnlRmj6BHj
dI/2cNAH+Yywu6tWeWTveqlMnR9QZ+zvTUXaYGhsV68Y48Bos+P8suh7sLpN
iGN/9WlZpQ19OOQfDtmvqpyX+8x6Lwr+9fhM2KE4P1Q96bN10K+VGYfB7wIr
gBOeKdMesv+eUWf8mT16UhwPd5wn8IOD/jzoR4P+oUo9p8RxO/bNoD8u0zZi
r4c4Fzb0mZDfMc4XjvZ2mTZzesh83bjO3hEy7eP6D6yFfcb3hPuGDQdPTEWv
aHNYFzg66A+DvjmOR6nbX2XaPWzuSyHzYrSrsbd16se1u0K2Q7R5o82vLcW2
flem/QTTDCNWEe2POB8Yx/51zjUzjsNcL32wy2+6FuineVdD5ruQeZ53OI7H
uq4nq7Qd+K3ED4gpkI9Yokqa2MJOQS9eZawD3mbKYFOxrdho/Hl8ePzw+4PR
Mdqi0Zas0l/BV4dGBv//0Sr3f67h/xMXYIxF6rTZxEiWqpJPjAB6K/uiJ/EP
4g5LVxlHWF96G+W5trVjP1wlNqDP6XXmODifVGdsgvfq8SrtNXMcGbzjfabX
1xlzQX6G72AjZ9Pee/ZUXN8hrtXRlq3yHd5M+4S/hy9C7gIMsXmRcYaOymDH
8e13CvqmOn28nbxfO/pNnFlnrgQ+GKSTfUfVmftA78l1xiZ29pkSM9iqSFz0
T+8Pc+6oDjfXGbPg2Z9VZz4F+pY6Yx3gkinGH8A3Z9eZp4EGLxELaRPjjK4z
14I8uIX4BZiENXVyXWAq5LeW37mcG8tAnlgHuGYv+Xs6FvhnpTrxHLkn8jad
HRNMRVyAmADYg9jGP4vEFV1c4611xkrAQOAxZLYI/jl15nfgr1NnrAPsMqbO
/A14CJxGHAW8dFud8RP44L19vLfn1pkTom8b+eiznjiQvmeV6bPia4Ol0Jm4
AXiQWAmYEBzY0/sD1iNvBd4D+x1Q/v8c0n7eq17eH7AWsRgwFb4Da9+5yGvw
OxTiOHWD10t53lWex6byGauL4xO3AmeCIw+SBk82ef+R6es4c5QBvzVwHvLg
Q2Ize8sfpPwm4kbkwZwHqzMYrZ/yYFDiI2BUMG2T8uDVQ3zWxH76K4/exH06
u94B3n98zIGO8518sC1YEfk+RWLVw1z7D+rZt0jM1d++X3tPOjrPYfb9xbH6
yIfu7Ti9XS/0YGWI8xAbGux6j3Bdc6TBn2DsId5D+ODUJu/hUHX7XT7yDXzc
0Pko78lP0gdLH638H9Lwf3NMxufdOsb3E6wLPdA1DnddvV0DcapB0qyFXNyw
v8kTtxoifbwyYPUT1JOxkQdLr+96m1zLcd6rNsrjC/zlOEOUGSENvh6hDGsh
1naEazzJ9cIfqQw4faQy3MOT/0YjD/ZvjmlJj6wS65NnBG8TRzu2yNzdqdLo
QIwMLM16kCHOdmed8TX8hJeqzP1Bc9+I0xGj476cKY+9AvpEeaOkWfso7+EJ
9h2hzFnS+BbE5sDS5BDPsu8p6o2PsKsy3DdyN6OV30Ia+e30D84pMq8HfW6R
OP1c19gcMyvTF+F+jinn+iVjvJ/4M8T7jlbmPPviO8AnToe/MlaavOX50vg0
F6hzw48a6XjI4HeQz6Qv/g5+E7HDM4vMl13oc3m5ypwmvsapVfpC5F5PrzLe
iI9xXp15UOiTq4w5jvOeEqM8weMl3pML6jw/x3Wd43s1nzL0+5c+FDHHu/W5
oGvXhc74UsQx8WvwJ4gPXuG9vdJ7ta3+Fve/g/QYn8VVf6ORx1dbQj408Vv8
GXwZjpyPLdIfm+A9JGYJRgefn2afU4vM316tPH4cccoLi/TvJvqM3qgyb4tf
dGaV/h3xwDer9O+gz64yzonPtXOdcVXk36oydwsfX+96n1076YvUZYI6jKky
3oivhd9Gzhrf7fw6c8bwP6oyR4sfxD253HeGWCcxU+K0F+onEsOdHfQLdT7P
XaOtU2U89359TGK493kN+fer9DfhE+PFp7u8yHz0LdJL+Bx5LqOdlzjtbvqs
lxXpB97ms+bZEOclxos/CD2hSB/09nLuda7hJ5J3vkOZ86r0bafa73b5PeRx
3z6oMq+Nn0gM+U5l8Mlu9B5eUKWfS9x4XJXxZO7hh1X6y/B/d19lf8bfJxZ8
TZHxZvzKiUX6k8TE8NfwW+9TBl/zHmmeATFongl+LTFofNtJ8smPE0PGv8Sf
7hr0ulXG3tfxyBgP1nmNGPc4fWfoZR2T9+ch/V/i2hfV6YdD49fi6+KbEyOY
7rOYLE0seR/9Znxh7jux7Ks8Pqpun1fpgxMf76b8jUX608Sc8amn2Af5S6v0
6xt1A4/6TIm9z3Aucvis/Vb6gQnr9NfI7eAv31akLz/Te35VlTF6fHB8aWSI
q39ZZX0DfO4/8Uqez+VVxhDIExEHeEr5+5ThGT1cJH96kXGKp31GWzov8vjm
8Kd6/Rmf+wx1JnZPDIoY/V1FPsNnfb40+Dzzi+uMFSBPXQFrvbvI+P9saWoW
nnGuL6qMdaD//t4bxueZvuA9JFYBTQyjt+NAE7d40WdxgO/wONZYZZ6AeAI5
+pd8dhOrjFeQI/imynoFZL6uMu4Bn9gF+YOHvGeve3/ILRBneLDI5wKf+3qp
Pjh5gkPtyzMlfvKG4xB3gMbf556+6bPjSI5gRpFxkbfKudff9nlRZ/G2Mhzf
lL6hyhgXtR/fVllrQRzjoDpzD9DEPF5TB2KHPL/m3AZYvU6dOa5XJZ/3nHtF
DOTxOmMR5CHIgxCTeLzI3ATxjSeCLuRDE1f6yOdC7AMZ4jOMRc6DfAfxEej/
Bv1jlTGfRv3Ep877pOPMtN+nyl9WZywIfW6qMkZE3+Pdl9mTycV8rvyTdcaL
yK+QVyGO8lSR9R7QxE+4P+RsGs/nK+/VnCrjSvQlR/O18jyPb3zuxGC+ti81
IZ87PrEdZJ4tMv70bTm337fyob/zfaAW7Dv5t1QZmyIXc3md9SjEK+6oMkcD
PbTOnBBxHnI85D3IS/1SZa0L/DWq5JMHIgdEDOPVIp/zL3/r97N9/wr+b2Ve
m1XnObmi/1QZB6OG58o642CNupzfHP/YOvNAxMOOqTPP9IfP70/fgfF1xsXI
FZH7Irg002OpbtfUGVsjL/XfOmNiyONbExfAX37FPsjfWWV8Bnlib4zD2C87
L7JP1xl/I49FTIpYFbEm4mjktN4q8hlA8xyJz5EDe0PegspsJJ93gLgdfPrN
U2eMjvHnrzP+Rv7r7irjkNDkyxZuzFVnDI282PF15tiICy5YZ2wK/n1V5tGI
sxEnW0qdT6qzBpoY3uauhXgSeTbieO8UWQ+MfHNsrc7YGTEi4gHEBYgvPVBl
7I86p2lV5gKJTxJXW9q+OyhPDOHkOmNk1DXz3fEt8Z5Th8JzIf4AZgPnYaPB
R+TRsen4MtQl4Afhp+O343eD0ZDhu8WPh4//Dn4AZ2CziCU21zQXiSPI19+g
XUMG+/WAfOYCg5G3xuaf4bzg9unywQONWDn7OfFj8r68n9ix1RyfvZ29+yFt
Gvy73JOQb+xv5Fx514gXUge1ivaC8dnbiesQ6yHmc0qdeUq+S+KWyLfxPV1T
HYgRLe973qjn5rnj7+ALgaXZo/mG+X6pS8QGg0/AuOt4H6idQ4a9mrpQ+GBU
aqSJuRDzIC5KXdOWRfro+OrEIYj3IEPsYqj8piL9dfx2fPRLnJd7NUI+vhK1
u/jU5M6oicUvIz+FD4ofC26nPpa14AueLR8/GH8N+VFF+iD4J/gm1K/yXpE/
wtdm/OFFxoNb+a5SH4s8PhA+CD4LGGCUNHmrN3ym7NvUsoKxm3NCVeLdiUVi
NLAcOO0xaTAdPsimylBTCtZq1E6Am8mRfSkfu89ewJ5Dbh3stqXv20xp8jjU
doJDqGH4RhpccY9j8v6DI8Ai5FBek+adxHZh19iLsH/YQezn59J8m+ABsMEj
RdZqYlOwRdRksp+vF3Rd5/75WpF1pMiDQfCX8fXO0KbQ97ki6yqRb6NtYpzn
i7SR6EPN57zut68XGRPZw3eAeCwxQeKBC9e5/7xbZH0m++EmZdZ9IUOMcCH3
yXd8J4mdETejdpp9lT2Y95PYU1/fYWTm+K7C/833k/gIsRH2O+Zt67sHnzgE
vvturpcYw55+a9Qv7a7+r1S5Ft494j/wiUVcrDwy1P/s5fuGP93Zd3ic4/PO
L6D+bxcZ50D+dOlO9sXX7qQ+Y333yFGSb+2sDD4g7/DVRdYp4W/jQxMD6a7+
5GS7+u0QY8DPJeaAX9/Nb2SKfGIV+DK9ff+pQerhvPj40Pie+I/7uC58/n2U
wVfv5lz4sPuq20XSyPBu7+/3wreznzqQw91PPvVOPaWJDxygDD4uftmEIvOk
vfwGz1YefYgxdHXtjE9f7MkXyl/td32gfc/yPUfn8a59Bb+1gX536HyQ3z7f
cpPfL99yX/kzlcG2kLftqwz7Cf4Jvgk+eB91wNfo531+URn2gcvkQ8PHf8Fn
wb9jXvYW8q2HKIOf2N9x0O1QZcjhDlB//B3W8qD7yQBlXlUeWwfex0diDwH3
DlL+WsdnnCvVn3WB2w9TN2qWDvfbv04a/iTHgU/edrA08RL8euzRr1X6LI+4
h4C3weP4L+RkZxSZn0WG/Yo6paHS4GTwMPsSOVnw9wbugWBI8D/YDD77IbaU
PBpYYqp9GQcMCf5hD7xLmnHYY4fZd6i4DnxOjRM0+xWYbbg6kHsdLp/9n75g
SXAgWI7vHQx/vPL3y0ce/HqU844UB7JHgePAc2CBVtLYO74VvpnrfN/P9R0m
z0fubxv3G/Zx9hBsJvFu9i72KvY19qsuyrA/7S7/QvmnOCbyp/tNYZ+Jt46S
xsZfpG7MC5boal/G7G7fi90L2R8Xds+DnuiewX50rfvfKGXaSl+rzFnq01Z5
9oQu8pFhDzjbe9JZmj2BvOkI7yF9Rzt+T+/h0sqPtu8erov70857y77CdzDB
b4H9jP1xKfcY9in2P/Zj9j6+8R7KTFX+PGn2HvYv9hn2dfb3adJgkYlF7qlj
HZ+9gX2B772Xfe90H71Q/XtKT3OucerAmBc5zr7SxAD5jtmnVnQPu/hv/HHS
xN/Ajnyn4GswH3gPLAn/AXW4wHnXVQY++yi2pIGhoNmj+Hb5ntfzmY7xObK3
scc9oQ5XSrPeK7xXW0g/4fhXOWaT8iv6jOATHyMGBT4GGyM/Xv4An+OTjsm8
7IdbKLOCa6EvPgG4jD2U/XCg9Mvyr5GGf63vRn/pl92/2RPZD/spz3M8XP4r
ylwvvZU0Mv187o8rz37K/glGI+7DnjlI/ivarCHqeYT3mfgP+y4+GzgRjDbF
cdgX2Tc/V2ay/MHKfOm8k+0LBmTPZe9i32Jfw7dlH73VZ3qkMsQuhsqHZr9k
f9zEvZl52euGyydeAZYk1gCeZBz26DmOeYfzHi89R3mwLHEJMCn7OHs4+/c0
6R3V823vye3qSV0EtRRbKU9f9mBobAC+cAfpDZxrqn1Z+z2uBZuCj0pcAVyJ
X/2u94f9Hf8dDAvGxa8/tc4amFKZ+9SNmhj47xV5r+7x3uLn4+9Tm3Oavv/i
RfqO+JCNuhdofMmOzotu1GVMl7+dNLWv1Jw06xz0U1XWX21QZP0LNLWyZ+jv
w6e24jHl2efxG9lL2VepUaHelbgA8u19pveqw072pRZ0b+WxEdS3PC69tM8C
m0WdxUyfy7a+t9hfalOoUaG2gt8yz3ItZ0tTX4HurId6kp7Kw+c3zk+7LupD
qKXAB3mxyvqWbYr8DTL8T7Rf+NvYu9H2RYZahmft21Wa+lh+7/yca6R+gboR
ahi6S+PL8FvmF7xXY6SpYTjXvshTvzBbPnqhH/UiPeQTO6EWh2tfatPxh/Gx
NlLncdov+Nj6Xbyf1A/Dx4fBXmOPyY3iL5C/JKfJbyjIb5JjJl9Mnhma/Ce+
NT55A+9DY1ux1/gq2F/yM+TsiP9gZ/HDsaejHf9E7TXyYJJ3qtRhlHgGeWwB
+R7wIb9xmOSYYHjy1eT4yM+SsyOHjS9DjSg0v93gyLWGT/O+MjfbdzFtNL7T
na4Ff2aatgY+dhO90O8GbeuHrhdbSSxgorYVGltJnTbvN+8zOSlyh+QNead4
57pq98kt4b98Jo19JO/HeQt1wFfBxpFL/NRxyEGRT8GWYb+INWCziDcSO35W
+wX/SW3oF66FPRy8jg16yDGJkzH/Z+rznOOvrA0iHoFNIQ9DXuMubQ187Mv7
8vlNBPWH30sf5lzYC2L0xOrX0pbh82ATGQcf4wttJXzs+GzlyQ1d5pjQ2Dti
Gdiyn6vMhcwoMp5M7uEJ93Z8iR/df4hZYC/aS2Nf8P2JpWNfyKEwDvEQYtrE
y4iVEZsjRveT3x21YXyzVxi7e6HIGkLGaau9neM9YTz0a9i+n9WTOBzjEy8n
bv6XNLmRUv2vMt7+YpHxbvjEFycYA3+pMMZc5354tDR+BrmXP9X/UO9Ja+eC
31r7WJsDYPxKGdbXyjUe4X0GV5CL4L3aWLu2sPFl7AtxGewathj/h/uM7aK+
s9R+ze87iU2hDrMRH4XGHjE2Mtg4fgtJLSP7+fXSxKupY+S72lI7voAx9OHO
iz2lznNxx+S3jdQIsg8Twyb2jU2hfpIaQexXczxcPrWT1EA2ainRo8FbVn1W
cHxsR2v1YS+9ybk21zYtozx2bGnHaa75rRNLYKOwW9hk7EJL9eS3nNQdYtem
SKMPc66gPPaHWklsEOfUcGLXsHHUF2ILqO1cRX43nys2hb7Yv9217Su7lunq
85E2pYX8Fs4LTb3hqq6RfQwbCY91ry7dxbVgE6kJpSaTGkLqM9eUxr5hIxs4
Yi3X3tHxsbktHRM+vNXkt3Wcb7S5a8hv5TPlvV3Sd7ibeyY1HMSyqItcz+e1
tzS2Fdu7bj2X11oZdFjHtfA/JG3kY9OpTfxODEBtIjV41I6u731eznEYkzrH
dsoQy2TM7mKfddUZ3RifvAk5lA19B6iDJUZPfH5F+WAi4vHwmxx/E+8J/2fS
Tpr71FYZ+mzg+P3VGRxCrmYD59pEefo2OWZ36Y18dvTb1L78ToS6JXAC2INY
P7Vz1AdC/+l6kec+UddG/Rl2vyFHDSG/l4FPzB/cQj6AmAO/T9nS8anxgSZf
wDVq8oi1nird/NsYx2ReeFvLB89QlzWfNh98gN3nNzLbyb/btYAN3lPmMufd
Xh2o96E2i5qfyxwTefb1oe7z1IUxJpiEfjvYd1tpYq5XOCbjUH+0p/p09j7z
rImDUCdHHJhYA/Vb4ChiCMRewV3UWEETg71RGfAb2Iz8B2Pgm1PXhM/O/3hA
T3ZsZMiPEJMhXtyYZxfHoc6IWiLwwATnY67G3PSlbmo3xyeOx3rAJ7u5LnjU
We0hHxzHb2DAcsQ+OjkmGIwcTIMHTS5mT8fn/vAbny7ypzgX/KvtA/8Tx2/8
bqiD3z7+O3VE4CVyd9SUgGGox6EuB/xDHRH0TeKr7tIce6gz9UjdHIe6HmqY
iOXyWxhqicBL53t/uT/Up+zjON0ch7HBtOhDbKSHYzL+Q84Lze+DGB8cSL0N
tTLgH3AWGAt81Us+834vH4wGdqI+hrwk+cne9dzf29KH62A8aniIaVCDtL/0
8/KZ60DlV3YtB0pjz7Cd2GV+j8P44DrqTqjjoYaHb4K4LTiN2hPoGeI3ckvI
QvO7rEadS5MyHA+2LziKfBXYDOxEbQrYhv8zgW7Urhwif6A094cxmhwf/Nlf
/ofSjXoVcFKDN1CZQ6Thg80GuEZqT6gpadSTUAtC3o3f5lBHQoyXOpkBjg8u
IoYLPuF3TPQlrk7twCD7UjPCOMS6wWjoAx5r79rZW6gJOM7xGRPc2Yw56/z9
0g/SxKbBWr8pQ2wEDDZUGWo5qMcAW35rH+Spr6BmoxlbKoMO1HDAB3/CO8a+
6HaEzwX8OEz5o6Sp90BfahrI/fHbGepOyBVSg3GcfGo04L8qDiSf16inoE6C
Ggmw5omuF12OVU/mH6IOYEL6giGpqUD+nSJ//zXCMXk3+/o+cH2kY4K1wdzU
r4CFiKGAIR+WJl4C3idnD+YntkFMBDwL1iWOw++jHpFPnARfGf8Z+wPOIc4C
5nxUmlgIMQ9iH43YCTT4lrgO8R1+fwWGJD7V8N2hwYTEG/AldxbXEZtoxAOg
wYfEPIiJbC3uIr4A9gDzEHfAp8G3JdeO3z1LeTAsazzZtTxvX7DNxsoTM5jt
OLuoM/UoxKNed+0nul9RD8d+y/9IUZvbqMvlHHtEnTX1udR+YKOROUf5C6SJ
MRODZu8kDk99yST3fHxs9s6PlcEefSofu0Pslvgve96FzsuYX8lnP6eug1o4
fkvLXorP+YG8S9xnOLIW/N1L5bOuH5S/2++OXDh+Jd8y/iT7ErL/Vv5t9cem
b6883+kfyv/q+4afST0WexT+bcNXm+D3xR7zuHoSR6Vein2J/zqCJobJ7xAn
+t1Rz8N/CrFvU0dH7R31Ufzu7Xr5vOucE0vEbmO/p9jvOmW29XxlcekU3xnm
uVodrnFe6EUdn7H5XRr/bYIfwW/gbpLeQj71S0vI5xsBz0/2G1nGubYSY9/s
d4EfOclvFp/lFt/5xeXznZKPutnvi/zPZL9H5rxRHfAn8FXAuuBNMCjxKr41
sDXYGJyOP9CITULjF4C7kQHrruk4+CjE4/htCLiU/1+BBrs+437EXtS41vhN
yR3KrOJa+K7x4W7zG1xfuodj36k8OHqaOoM5wbWNeB5rAYuCW8G+4F5iYuAk
MBI46z6/zV2l+Y7IAzL+6fZlTHAvdTrMBW4HZzEO2HY7xwcj8/y4tzzb3X2X
LhfvgefAbM2/Ia4TVzT/P4nfcnPdt99mc512ndipm3z2AXJJ4KQW2p1Zfjvg
lxl+j2AoZMib7Ce/gX3APWCe7s4LTttfPjiI7xp8g93fVvu9ttgAzPG+mIFv
EFvfTz7fO3Ye+c+17WCFL7Q16IkNBTcxPngMbMs9IQ5JXgZ5sAEYAWzRyD9D
b+g+gM3GDhLPwb628Zum9pHvGruH/SNOgn2Exg5ib5En/tNRe4mtxCZCLyLO
es41Hu1cjVjUeNdLTANbjh3nnXnW9+cS+7JnjpXPPg82Z79eTmxAX2JW6E8t
EfsVeOBF10JN4Gz7jpXGHlAn+IJ8ZF9Snr2b/2Th/1iobeZ/W+DRB/nR7o3P
Kz/Rvtyzl5Wnju5Rx4GG96pr+T9AAZGZ
        "]]]}, {}, {}, {}, {}},
    VertexColors->CompressedData["
1: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
eeeacnk5SPhfOQi7P/ZemG5g88eei/URDB+s72M4YPvDGD7RTs4nvFeTvqyz
j5XjQMOGi1Ji+pfxfoHtw4z1euy5u+ssP5wQ5oKo75JfMqSf3KEbi3wzOLBj
wSXf9QwDn6Xct88eJD5kNErL9j0+7vdUMuSOXTVES3gu97XNheeFLb1i79rQ
+0uOi8vpWMqCN0MSpYeOvQT/ELd5llrEv03slgxTY4GE0vthiccvYdGEAx+m
6rLB1C7QYV9+FTybtNas3Os12PNZ77Xa2gbmc5mSa0WV4LSqd4/sngRQyTdL
nzvQCp/TzmqK9BE/+VIt7fCLN3B991KdzGNtcPq11BC/VRXU9J2/8t3rFUyq
brjzelIb7LyTs6mkpxISfhqfvaDxAjxk9TYcn8yGauXC+taQGri0qfD5+aAC
qNmjIL/kQTs6H+w+84cfb6lYVQup32rnz6x4D6FJZ9eIzuxA54899wRXR+3y
ZpK/snL5ZHJoqL2aNrRIkELxxHCw5dcs7/JmQE+vaXPoBxrSw9xmC/7mwMiO
7x5i3xj4WMwHNsRP2p4xYpm/w9cXWy9sntj983fPu0jbUGD3pn3iF1EaVtiX
blflUhBy/5GoXBsDe86GV+zkEl31t1Kz+cCB71bRfU3DDKgYw8R+ordPf+WK
sUje1GUWOTR2M3B1sqKEYT8N0z/GXy0pxq+f3FkeMdehCl5ePCrxg/UKZgpO
f8edQfzM7vaeokEWtHas1cyqSodKSf0O13dseJjifi9hPAtEXno7l2xNgvfm
QtG2C8j7sid1W5J13MW/YYq4cwJk+a09NNDfiuJ21ERs2vOnLDBy3+Vm/jkV
GLWqtZtvsCFUxC7ogz4LWtLv7yybmAx87YczxhuzYdSjsWVPXSXc8R86Ebc5
EdIcNOYPjrTCxln26rrfK8F9Gd/trLYXMMVoS5HGTDYc2VhaeduGBY+sxRdu
ik6GrMd/xCZbs0Hu4iG+xaMsSN0h9S5bJgO6VJ9lOX5gozgvokeaHQ9WwW/Z
Ti9nlSxIyrnWuY747m+mQpr2wiwwMTPcrPgoCd5qK8W3SLMhKHBUquFXJax2
2X7RY2YSPIEHOUdF2NA6tOv7u+pK0BD4E9K3NBFWLsibPme4FbxPdOqIF7HA
eFKHJ19MGqwOyUtOi2YDJ2HrxWeLquD88ieHy+dngvbCm8d2dLBBuyyn60Zt
NUzxU85X4suHy9bHT4rPbUfnic0Hm39fr8WX5v5KsPv0OvZHzAtoOC3/UUaY
DSI5Caw+yyqIrTXec5joxp8rBdIviG5g4x9PLtQ7Ob0WCvYnLaxb/R6ey6dK
W31tR/mArTvGEwxPDDcMZ2yeWF1gPMT4hvETW0eFBNOpGocZ4D9okLGrmIZN
cn+6nUY5QKsrhhwjfURocNLqf/rI7z+DhadJHzloVyPXMZsL5x95mXwdpWFx
TMD26WkctH6xOsXqGqsXbJ7YfLD592edHje1j+T3PuU1caSfBjem1twq5ICx
8zMBLvGtGvIW8wzTiV5dVW5KFaPg6oO/X8tLGdh3hg4N6aLBY4lM2MdqDnxL
oDgHSK4MvV6aJEVypU6Z3+AVkisxf55svcx0+UwW1BQ82p+ckgQ7tTOn1i9m
o+fxyh3tkwVLKqHFdca+6acSIHLvW235f3J9ms/8RxksWLxDx8B8VRrEpB56
xgrFr193pXYzI8aC7WWlm+Mak0BqTnxnmwIbZr3bsPbFgiqoFBmO0hjIgCdH
MgzlWvF9thJhNzntkUrwPLlt7c9FSaDAnJgpKcaGpaNqvYK1lZAkKm5QrpcI
eqsz1oySusDOJ9SYZjy3aK8EaV/xZrfeRGhiO/aGT2DDzHM3Am8osiB02ase
/V0vQet+iOewBhsmbk1ovJlA8Km2jLL+mgq6RyLy8oLYEMg7x7Kcd47Fj3eO
5QQvR2vycnQLL0fXaWQrn7nEgq8xouuCOSlgd8PVhc8LHy+KnMAfQtYlb6uM
pQhZF5WDnb41ZF0eVg+MCBGcN2YY7l5EcH5YMFtGgeB8ZtOd2P3rWBAyecZk
QclkeGXSkHjThA1Wpx8q7iX8V0qpzF/rkgBR6va7+YjfeNEp6fKGjA/PeuVe
uzcB1v09EKxDxlO4HseeHmfBcN6LCecPpsD48XvrT7izUR5ivO2OnTf3BeGJ
+7sAv3TCk5LCQLXmUHzd5dq+RooeYIGXWpw6WzUFKg0kzQ+7sMc8T9f4pnnx
HyshRPx0gEtiAoSfoS2Sv7WOGTesvjpqPL/fnkb4zL6WUByQBDK5Po4cKfaY
eYWdhx8rz2OS1l9tyWZgqT/XIJRNw7lVl/t9mzjwcn2Mj0EVA8ILqxdm99Jw
P3TbglufOeh+HVa/mG5gdTG64pPTsy8MfB1tEmumaaDdm3ft+MSBixMnJoY2
MNBWWuZWR5E82OHHeVWGj3f1Lpjz5iEDZtdVZrbV0uDMd3HztV4OyDCxyRfF
ueD69/eRKpLnsv37BVa85MBgOl9p3nwu5Phf2vvP7845jVO4w2Rc2qxE130B
F37yX6aOk3EP1b7xSWTcYbQhdnIbC8yGtiau2Z0OEXwT3kVmsOFt+50WpYpK
uBeucl6yJQFuqr0NVviJ4/M29EvsKlIXTw1ZJx1JXbTmNvZPr8Hxx+bj1HRI
NWYhF9Y8Xzbyz7ksD5s/z/85l4W976op69bdWk987oZJy6Zmkzy8ca35Sjca
2p7zH1dc0wmP7nASfaZ0wYmALSe2LWMgLNJPeMmrLphd6RGstacHOod+xHI1
GNhRd3NVczMNVvdHdbru0vA+L+niWaCgJCROYVwdA+mv1cp/c4g/txp42F7O
AXHtYklzdQZubZ7FdUqlYW32lr5V8yi0XnZPMfnz+REDf5K2vw+uo0Hv7fmQ
8B4OWGjNs/eYzoWp/guaPUl/bOCfNFuI9MdO/XuJzjQDVEaYQ9EADcv2eBrn
kbxJpxrf7CI47H30fe83goM6Z5OIAMHhQccRiUpRLtz6NW38vb805PYHCKmm
cmDawbb14b8YsM36k6lM/H9x74MD1bkcWBi6b98Rcp+V92S2fyL3mXwx54Y2
uc+a/hW7dsYyEK1d9W5/Aw2vatfLLerCf095bbEvWJ6PCzsUtZzshmioFF/Z
1fWGA7f9xG/wyTKw3jjvoskLGhonSfOJSlGwz31JccQ8LoQ0N6Q08TFw4bFF
g28yB/a9iPeNmsKFoW8/ki8N02BSkx395BUH1AwmK1rO5ELlgieqc4mvmHfw
YKJGOgf0efOM4c0zkzfPIYN64QvFDIQeOahV0UmDfoj6wSrCQ0MP+dPWJHeJ
0roHpkcQfXhtksfWwM/nYHWB6QZWL+mvL1yI6q2GS+7TH06AfKgxWipesbgd
5Qm2LlgfwfQT0+fbqldMdvfVgarqGqnneR9BL1EUwgw7ST78X78HJfN+Dyrg
/R6050rAgO8PBuzU1p6R/U7DwLnbojr5HODsktsdSuo0cdLoVBVSp8yJd0Np
pE4Pb2CbLBIkdb0jNHMn4Un35qMnrhCeYH4A61NYH/ylnMlnRPD5sG9CSw7B
xy4mnt+c4CP4Z2BvB8nXv6wFueFknQWZyMBBMk/LiesHarYx4CLhvaDnLQ26
DsH6eVMo+H34TlnfqlrY5DVy53TFe1DTknBQmtkBPWaSBZbx1XBNZudlG9c8
iC1k50381Yb6B8yfYLzF/Bjm9zBdNRu4rZCfyUBi3ULbG61E71YdW9L+hQM+
jy1uniXrcms+q0CerEubnoNYHlmXgck9me3VDJw8qqFvRHRsSuMc5ZoKDup7
MV8nE7HXTUuNBlt9pfKndjQE9Wa4uwZQsDw4jLuug/j77/1xKaE0OMa5PBLR
pdA+iOn8/dUd3yZPZEDz4rYLj6JpeDBuDexZTqG6fdRILEZ6GtGRVocNcbE0
fHJLDY9XomCcb+St2wMMTL1459L5rzTUyrn0HyjAdTv49668mFlc0Ji3WvwK
Wa+IWZl/HpD8Ei5vT5u4M3Ds4KnqV+9pWFi54c9dPgrVPSx3YP4fyxEGH76n
TphNQ3SVch5lSYMFZ89d1n0K6uulFZWIDyjb+qXP6jbBOSjmxlcDCvU/mB/A
fAXWT7H9eYyHY10XTGewep+f8aqHCSa8cVU3Ma6iQcB813gnLgcEfshesehh
oLw4Wdm9n4YP9kbCt4vxuihd41J5mqzjVBFrHx+yjjoCihVv3+B9p/v3Xo0A
Mm6znKWlRMb5jiZKipNxjD8soWOb9xGfc+F4Zvg/PkcppfzAPz4Hq0fsHMKF
DyFVMyS4sH9bbqs1mf+Xn3nHzibh/BTRCVwX8Jn4gz23H7B6aKDutIkXV+Lv
i+n59rQ3P23FuFCkJjZcSHyFnO7vDd9S8NyN9a+rP7wWLSTzvx1a+duW3D8t
RnjwZBKu2w6u+WfS5nBhbnW5+iriE2JS8s9sT8H7yxux60+Ux3MhVcBdxeEX
DQHBJzWvveaAUbahwYUABh5HjUqXfaZh7k7LsLQBDpgsWnguoZXwZ6fR6haG
hj59zx6+j3i/EL2e8GmbPgPzpaIjXmcS3aPGL3CaTUHZ7FT9gG4aUpmJqz7c
p4EJ+Cz8QIcC2UU5Ii88GEgu/SS3ooSGe5EGjcZ/OHAkWEnIhdSjnuy9UxL/
/A4zoddblvifj0ntavMJ/gUVNlETCT4zXfoHuASfb+F6OVM6GVjRE+dl2Ufw
/3uxWrCU5E1ddf5TU7lgX7NudQXxS9214qpGxC/t0HebuiqKAdFOg/PT6mmI
+5r5aribAwH7d3PKjUg96h1svJFFwyyfu259MyjQGHapkiK+VHLELtmG+FIz
3ZuDFPGlhtElnm8nN4DAQcPqGaYVEHVo+ILt1C64vidIgX2oFrZ+VRUWCSgC
3Uj/1yKaHeh7YfNvu3Ys1vxWNfjxjxQ0TcsDM2sb/dddbSDCy8XNvFwcx8vF
Y/WNGP8xPmO4mSI8wfCkLze5+nJqYbKf196jK0tAL1bk1ZrADjg2uvTC+SU1
YEotN3wo9Q7y+7Md3ba0j9mHDFRFWiWcrAWVpw47Hr0sgr0+A/vj9cj1zD3F
SM9qeOP+KetWci6c31W5Lamqbcy5Y6x+G6trtH691Yr+dNZA5KBXa/DzQqCV
1H8o1bSDonzKnCwy/7NZ5vt7yPzlBrWb8sj8sevHmo/GmgvGqifYuo81l2F9
DdNtTJc+OgxNd0tiwPrxfdv3X2j46N43KZLNQfUqOvaJw59yCkZi4oNv6dJg
E7n8W0MmBfHXIg7ufkJDJEt62NmfhufFTmk7bagx+5NjQRqCQu9o2Jg3eD7i
OvFdrRFlPzZQY87dY82tWL/G+jKmS1huwurxyQ/bG9lk3hGFH+c3hhF/RZ/+
pKxNjdk/Y/dJbeXqvL3FwO2qkOEAFtExqUCzXX14X8byOJbrMb+B5WWsX2D5
F8ubGE8wfmJ5AcMH87FGk9oWpxkz8PG+j1kT0fMZz9jpl4me9740VBHL7YKa
9bO7rD16QPSCrNCclfh5J+x67Hw4dm4B+266oc0hbi3Rk4Tpd865ET0p2fe0
5QjRE1nBPoEIwmelT4dULhE+x5zPqbj3Ev9eGPveGTtPhX2XMWBqpVN4gAHn
J3ovA4uIPuxSsff5ywE53t8zMeX9PZNVvL9ngn0XI837XrKJ972kF+97Sez8
TPTE9ZG3DzIwUW+yCos8d9fG4/wS5LnKifVqtjkM/OzvXn2gjQZvwWpFh0YO
fNL//c6fn7xXkfQVBaLn6VHPLGuJnouc0uY3TyV9YdUJ2dkE/8SNyV/ZLfj3
odjfTUo93CYfTOpqU/3ReqnLNGjAUZ8kKwrlFfZ9scD9ai3ZOwy4rtHzmlBN
w74L5xudGZy3tfzSJRLk+t2WRVv4yfU7shLe7CHXY889eqA4zaeWAZH3peZl
RFf4PrP3SP4/ckfJt98PF69thJIklaL0/ZVwOFrXcnN3F2xZ80SNz6UWTvMP
ngTXInj58trhQ8od0ObRp0C5VsOytCzZ4165kKP2KX2guO2/DDfsff9/8wTj
A7aOGM4Y/zEeYn0c86X/VeuF5REsd2C6gfkWLHdguofpD+YbMZ3E9ArLg5hv
x/QW23/A8iDWFzDdxvIRpp9YLsD6DtYXsNyH6TzmGzF9m5xQF5p5mYEWmSyP
qxU0FJ3jHHf7yoGb93Ss7pF1ClbcckjmJqmvuT5PGRMKhqq2fbtlUQNBd7gv
h6Lfwclvn5YpHGiHaZJaucPXaBD8suGwwSka8v2UHKOcKajY/Wfd7MkM8Dne
nx4dQwP/4uobU5dR4L+m5PXQxybQrb6S7T2vGsTrH+bPH+mGt8ZDecCuh6vH
c82cJlbAH1vTrnvcThDqdZufSHeDd1rUSoutZJ2692weWM3A6M/Ep4fUSN+7
SK8cTaHA5sLNsoQjNOzRF9YqFaNgjU+8ZvlfCnzz08RZ02j4D5Ya1vw=
     "]], {}},
  AspectRatio->1,
  AxesLabel->{None, None},
  AxesOrigin->{0., 0.},
  AxesStyle->Directive[
    GrayLevel[0], 
    AbsoluteThickness[0.2]],
  BaseStyle->Automatic,
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameStyle->Directive[
    GrayLevel[0], 
    AbsoluteThickness[0.2]],
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Automatic,
  LabelStyle->{FontFamily -> "Times"},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "GridLinesInFront" -> True},
  PlotRange->{{0, 3}, {0, 3}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8094148864789515`*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"824bd5d7-6ece-412b-bdd8-2f5e1230b982"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"x", " ", "y"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8094148080575986`*^9, 3.809414827583401*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"68f9cf86-4309-4a95-94be-7e8ee5defa76"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1: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
EnqGM7+jZzjzEXqGM36iZzj9HT3DaZ/oC44++Z2fG5MX+D3JM7MehM+auW/9
8dRxZh9N/s7+EnqGsx+CnuGs39EznPWmrjOFsz5Cz3DsefQMx/5Ez3DsJfQM
Z35Hz3DmI/QMZ/xEz3D6O3qG0z7RIxx98js//Q+EFCjZI8DinyNthVNup/Xn
l6wRG6ZOn22J8un81NXDT/nJVjGh2bZs0d/5O5zf+dkp9lGGqH6nLEl3+V32
ckvhkmFS7mUeTi8tu+J7vZh1zGppdHBoGQ+nVMpj2hboUPa71eL3rx6+WYqu
nVndwSHKkmPyt8Lxba2Wch7J5ji5OrjAr5d/2yrLJ6tl9JqNr3/8SKI86f1J
Dxtct1rObK7eJdArmfLxSwt/un41QfMDT+E6/UiNL3GaH3hNx1OXxg+JsZz6
1Gelk+sHi4v36xdugQmWY7+drrO8lNXSINW6gYFen5VfeZeu3a/5h7t93V6g
/QiTf/iSCUliXi2N1/zDr31xf2H7LvmHN89r/Vq4ZISlVEyZS26Bb/Tnb91u
e6YbZ9V8wpvmW1pjYqzJJ/zUwA2hkzskaD7hGf7+mvn4oxjNJ3zH862pkm8N
1/LwHfSg6Qrnu/zOz0oB/W/5PY7X/MDDN799vLlgtOYH3ii886hN5UK0XuDl
Pdd3K/Awyof8kB76Jz/6HSkv/x/Od/mdn1U6hYR1+BCs+offeNEostJfkT60
H3iPYVcHZuwZ70M+4c/3dyi89+e4SnuifLRn8g+nnZB/OPVC/uHoh/YDX1fp
rndk0Rgf8g9v0mh2y2UVrZp/eKppmzLe/mm3kH9412S7Oz0tEav5p13Q78g/
nPZM/uG0H37nZ7LSxZYt+BTjQ/7hxXeOrHH0hFXzD5+SvkeBiJ/2APmH3wo9
t7zmpkjNP7x5ufRxsT/tN/LPdxgfyD+cfkf54eiTdOHkk9/5ufpA3LNUmRI0
//DfmyTt/GZeuOaHvzMukR84/Z32BKcdkk849Us+4eiNfMDJD3qDfzvXJc+z
N5EWxmX0zbit46xwxk/yCadfkE847Y18wqlHfufnUUvy5HfCo3Qc0PE75KvL
7odWzSd/Zx4hn3D78RzOeEL+4fRf7W/C6RfkH057Q49w9Em+dZ6R/PM7P89t
TF8pLCBW51nsIP9zLnFfPTvq+ZrO28L5//DEkbuzNZnpq/M+/NmhvgOyV/PT
/sh83ehV371x40KVo9fZG6/t/6tnnPYH5Pc5Nss+onS4cuSTDO90PmNovLZL
5HcfC7pc91qEcuQfhhVdmdLBqvpB/n7bOVXd6pt2hn1X0S3lOdu+MeVF/vrC
dOMKeEYrR36R+/4ftn0P6pfvNvWv93Hwz/ThtJeuwacO2PKv46/ITz7+MXuG
qWZ8wK68e6+V94lx8ao3eMKbPMdLR5nxBV5w4Op6p86bcxPSdzx9O6Nt3wD9
IL/ucUSWej+MXYf82A0pc9+NMHpD/naOo9fXbTV2NfItVziG2vYn0Q/yC8qM
8Z2+z8yP6MHzwdmu3/fGKsdeXhb6Yalt/YJ9i7xPp8lZbPY2+kS+w+XVDrZy
Yfci333h3Do2PaBP5GvNvJKw6Yc5H0H+3fI74bb8o2fk/eek6lHM3ZxPIb+x
sGO1kT2NfYj82xcdd9jsf/SP/Bdfr/U2jv6Rt5Q5uqr2YLMeQz7LpAOrWt6K
Vf0zfrvMyXbaZj+gf+S3z92w4PMv4xjyTx4GXlqb5ZHOm/Bp1Vo9HprKnI/A
L8/Z+NjWnpFnvdJn+vAtfScn6D4G8nMPj3e26Zl6RN69UdMstvZDPSKftavL
adt6n3pE/uJVf19bu6IekX+RY26Urf1Qj8gXfZvOqffxeK1H5LP0CF1n21ek
HvXc/sf8uSmrx2g9Ir/M+dTfxYaY+Vvt2yl7Nr7O+1zzAUdvpAtHP8ijV/TJ
78gvy/hPHtv+Er/zdzh6Vnun6+U6tvaGnpFvfittXtu6Hj0jPy7Pxfa2fSr0
jHz2mut32vSDnpGf3NJzgk0P6Bn5KclS5Sr3NkLbFfIvygUkyfvqvs7vyPe6
Z11j23elXZJf+jvtHk5/R59w2g/6RB+0N76HPHogf8ijN35Hvn/6dmds/Yvf
+TscffL3rm5N/3gTEa76RH7Z4+JFu3QN136KfOkUAZmuXH+p9gbybdZ6Luu0
Mkr3M5GfOveNv23/BH0iv+paofx9b8f7MM7yfeYX9AxnftHzXeGMk8hTPsZV
9I88/RH9I0//Rf/I067QP/K0Q8qDPHqj/MijZ/qjrneqvWgytHaQ2pnIB/aY
mta2T8J4i/xezylDbfvSjLfID0u+q/Qf9eJ0/xP5lCU35CqV36xfkI/vcmax
bR+b+kI+rH+4S6d7Zl2DfNVia0fa9g+pL/oT8zvzIpz5nfqCM09RX/RX5jXq
S/czZDykvpBn/KS+kKdfU1/IMw4wfiJfMHvtNNVLmvMU+KC/g3t1yR6h9irp
vJ8cUO/7WrNfivylGe9Pu9aM13pEfnavIr/Z2jn1iHw2xyH9NiWa9Rryj3tv
iO3z2ZzLIL/37w876yXEaz0i3/ZFmb8rX47TekTesqlkn75/mfUd8vXTvCuR
xzvMB/tP7XGxY6lfOHYs9QvHTqN+4dgV1C96xQ6hfpFn/qJ+kWe+ozzIU1+U
B069IE861CO/I/+t0o3x1owJWr/8HU798ve4ShG59r4061Y9Vyq7vK6tv1C/
yK9Lk9Xz6ulYrV/kdzew+B35uX6nfpE/vXPmRac+IVq/fKdO2JnsiTXua33B
WUdQX3DWEdQXHPuZ+oJj11FflBs7kH6EvL39gDz2BuMI8oxvjCNwxjfqEU5/
oR5Jn/6FHpFH/+hR932lvvgd+Q35yu3at9Tsn+h9Q+HUI38/2GnIHNs+M/XI
z/QnfILrnLup/Qt5p0YHwkd73la7gvSzXSnVbFK7YN3nJR3Wd9QjnPUd9Qhn
XYM8+WUdRP0ijx1O/SKP3U69IM88Qj0iz7xDfSHPeEV9Ic/4Rn1peaX9U1/I
01/QF/Kr+o69GP/L/Ej/oF/wu+7/JM4KLJ/oq+sOeO7WlwKGLjf7Mnw3+6gC
4X3Khei6A/nUUyo07rbL7G8j32f7oZA3DeO1HkmPdTfrZzjrbuoRznqTeiS/
rE/pX7pOkvUR9Yg86ynsDeSx07BP4Nhp1Dsce4B6J33sB+odeeYd6h155inq
Xe3Evq8CVs8P1npHnnEPvSNPPaJ3OPWFvJ73Sv3yO/ITdkw85r80XvPN3+HU
O3/v6t93Ya5xZr2PfJFjdTd/bWvV/SX+zn4R+0u6n33G2fry9nZn3ScSzn4L
7QTOfgvyeo6698l2230q2g/y7D/QfpBnv4L2gzzrZdoP8qyvGeeRZx2EfQVn
HUS7gmPP0w5JH/uf9oY89iTtDXnsT9ob8tgttDfksXMYH5BnHGY8gTMO67m1
cPo17Yr0GQf0XFbkaQ+0G+RpP/yOfECPmReqnAzX8vB3e047ov3QX2gvDx0q
N2w23azr4akeHxpvayfkH77g2LgqFwLMeS3ti3aF/vW+dFvXE00nmv0Z5pOU
WUaVtd23IZ/wUP+YVrZ7TeQH+67Y5bvZbOsg0uU7pE/+KB/l4rt6X0/GDeT5
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
oM7X/Dx/v8ysubm2aX3NKDbMp7HHZUuNsjX8OhU5pPX1PnfNuGVOFyyX/qz+
fPOn4zpPPSDO2yfPi496eKseTnzeML+pxzFLr7Hl26V4elz1UFv2t9Pu8t7z
28DD2m6/f8vx9bLbOktqj/wt8lbbrvW7QtYRA+3WZSkk/xfXuRSwzTvoZ7Tk
f8Nyv22hDXx1vouV/Dfp3fj9vFMPdL5jXT66ddDI0p/u6rzvJ/k/kHFf1wmF
bui8v0PyvyE4TfOniRdUj6f8S+Z45vXUMuhI1ysX7h1VffJz89m+m50aX1R9
lr72/s8iro8seQrP93MucVP1GSn7nN6r/Qcku3pP9bn5hM/QIYEPLRd/S9Gw
1+sHqs/Osk/Qc/G9LD+a+qo+i7TNVn1o4F1LthpexQ+mMuP5t2f/rUcO261r
jkv+jxSbvGRH6jDV5xDJ/83TxZe8nxWm+iwm+W9xcd/Tux/MvsTHVNMPB3qF
WkLavKrw67qGfZrLjyr6Bqe/o3rg56tAzxWLh/upHth3eTJnTcCMUU9VD4M+
N3nu5BpsCSjdZMGBjUGqh4Wyf5P87/J11s4MVj3UD+sZ7eEUZBkR/zWh6huz
vlvNvr7duuad5H/riM3/rB8fq3poKflf1r3ZxIM940w/KpLQwdUjxnKk/Yj0
v65rOC9N9PpwZMVQXy3nDcc2CW6BUZZ0dctW3Tw2UMvLz5mxY+5eKPpSyzsj
xwl3D6dIS/U/wtfvSmLGf87TFhYvWaVEnwgt12FZv6SzW9dkkHyW2na6XMVO
Zl2TvVDpKYFeryyDG4/3/3Vdwz2F0bM2n+9UwaxrQmr4LA/0slqS5s22eEaK
l5pvi+zLHhqdxlo1Z7jmn5/eF1+UONQpSvMZ/j/WNdkkP6lDnvW51Nqq7S1Y
vpvj65RpVUsY/W8p27u1h9M7S/dLTnl+XXfgd1vKoVa7bVeeaf6/712xwcn1
raXjkOMrLqYy6w78+D+9fj500TCTz+H/Y92xWb7refhS3LgEs+64K999NOqC
a9E6Zh8gUb7rusCr4cTaoTrOdC12PcrL7Y1l/7B66W+W8dVxZoHU87uVqwbl
XHRVy1vGeU0RV4+PliOn6n34dX3BvmaNyX/O777ErC/mn7r1T6DXB8vvFVKd
LeVt2gk/99mtI0pL+kdvF+g6rVaolquLpD8wWeWFrbIEaLnmSfonni9d/Obw
NR1XNY5ZyNkpeyMHq/0QXeX7abfA95bslRb0ybflqs6np+X7t2Q8p1ycI3hv
bhZ4dIMZL3LdSFLPw+mLJXvajKP+6GDWEQtYL9itI/g5cVfclfZFH2q5oiR9
h4Zdriy9PkfLlVPSv7q78oC/L9zWfP63n//dcvK3zLt+XUdwTnFPxkm1c/49
n/lmSTtva6Pn/8Ta2Z/fLbXs1gsNJX2X1weSTBh0VOd9fjqveDOs5/dHOu9v
l/TrLXN8eWNpqOYz5tiGe17xDi6V57dI/+t6IYmcd/RY/jbV4REROk7G/nt+
8cNyc7JD+yuxwZrPh7zHYWf/k35URr9dnYYEaD4dJP0hWb+f6PwpXPNT7ky1
6h7bk7p0zjau7a92fkM5Hyk+aFnGW79HaX5Oj06+x61LEpfjU0t49U7zUPOT
i3cA7Ox20v+zxs5XY4dF6HdHX/Ld6tblp90b6nnpVzt8oZyzXO7XcdCd3dE6
rnKOc7XJiLyejk/NPuHkTdlcsyZz2VWyzfXWsxZpfrqLPZzJzq7muz0yJgTu
Phun+Tlzc0h616wpXdL45rQenm7sW/b52636r7+T/naxP8fb2bek03nS80PV
T1q1PcSkTl3BY3sKl0Nlhs1bWTZMv5vsYZrRTjdSuVRqsyE+3NfUL/bhYTv7
M6nIB/7WJrlHwwSzDpLzl9IrZ87NWC1cv1su87Z1bl1SuRxM/ujmXEezviv2
/T+7LvFOobzLpvdX/buKHeU97canHFuW6vhWQuyWH8majPJM7anyXcXOGZe5
ZMicVyd0nNwo836g3B+GN5X5eqrc1yX/YTJvbpV7feR/tsyzUV1T5NkUbNXx
GV710LkJE5sYfkXm8ZihrV/NaWO+GyXpN5B7ufA+Yg8MkntTrItTybxc8eyx
Un6pI7W9tSs194KTa5xl9s7QGv0qxWt9Hbd7BxD532TevPk0T6brHU15v8s9
tVRyv5HybpF5+dqd1Ru6R8druTYLn+W6qfl9v0jlzL+jR5ZOftUSru2Wn2FL
PPNeb2PW48y/I5bOeNjwH6vm03v7l4quHq8t/3RpmWH6HKuWK9LOHkB+q8yz
w5I/DswZYeyEk5LOkVWe3qFnE7S88+X7LdZ367RvcqyWl3n2rxQnH9evYvZd
o2Q++vLKMcbd3dgrC2Reu5n2bqWrGU08BM79Mr7um2/qbsOZfwd0DFyS5q0p
10i7d+4oV1mZZ0NiPU5EvTJ2RQP5u5vl6cCLm6O1XLnkuzEVXk/ImxCi7cdV
5Fv4vOt70i3Yh/yPrF9psZPrZ0vOI41nfNlr1tfMm863fKbl/2TyzzzbY862
vBfXmXb14EK/AC+3T5alQcdP571k9iGTyH4g78ohf0bKMUTyr/tFks7F8V0K
WMu/1HY1WvKZI67CFb81YWon5JB8huWa2XnvzUjdb/GUe3aNy9503lY2WnmE
5L+n+N1T3v/O9xMt/Us8fuzuZfTgKfNmzXdzD/dfZvTA/YQ0c1tX6BYYp5z5
vaW0K8rb/f76/W6BXy3zMlfMcjHMnJssEjtkvdghyLvK/H6uU60pT5saOzC5
5HNh/L1aHx0SVA/bJJ8ZD852d21u1fJWknzek3gCui8t+bwt8QQob8Py9/O4
ZnVwaZKySfdvHU07zy3944aMA5SX8+587Q/7tQmLUs59iXyl7u2cfTNC+1cj
Sb/X3yP/qfzG7BfBPXP/fiZ1Taty/t+wa/3Ljxli9tMuyHcfSHwDOHZFwUeH
Qs9+jdB9xVdit/h32TruSyrDo8Q+CSvcIt+H936qh4XV/nZ3upHExXd80K7S
l2LNPtuXB90DqyR1aRq52rFxOrPu2yH3azbL/WryvUjSydqpZqXyZ0254IW7
tX/wqFCU8u6Sfmjgl1Njx4Vrfnz5fzLe6j5YErfrXvHJXFr+9bpBtWyR2o+S
ih1SYP43l9VbonRejrWLg0E++T56Rj/JJZ0TO929u/R6avZXG27pEFglhUv2
iPnDcj4180h5qQfale5Xi/z7Z1XPTGxm+ik/2zdcOHTOxpc6Dz60u7+q+5/N
a13wik/pUnBW1K2d0ea7Y+QeRWG5H8t3e4j8o5J3POv99Vj1DG+0rtihphXC
tH9hn/xZc8G3fXsjNT9jiesg8SjgueziTmCf6P0H51nV8nr01fPuBj/+s3Pc
6s9d2XrmUR2f46r89/+SHj4/a9mzF9pfdsl+ToETsy4V/SNEuZvsb6RMMTpv
3+2xmn/kj8zYXG/sO1Mu9mGKHH+24mugma9Jp8ka3yMLUyYo3yf6TpFzU46I
VlYtb3+xrz68Slqm0owwY7eI/XVZ7tdVsLtfV13u11He5mK/TcpQxlIs0uwv
NZV9mOfVsx9JXyxCuUsmx7zebuGWQR8mPU8eYs6RV4pd5+TXJHNicnNeyfly
s6cZj538btXvsl+05kuxPe0STLmQj5X7dYzDteS7u+cGXB3qYdb760V+l+wL
IZ9F7LSZ7bdfcGlrzoM4L/6x9s3dSU/jtFzsK/SbcOfE9alG/8if7zC87vYr
xg5EPlffw4XzjozV/Dsc+s9+O/l05uvIHuHKXWR/JmFn2X21UgZpOn+J3Zjz
UB2/AWVDlWcW+zD5uQW136S+qeM5fgxzPoyaPbxGrHL2f9Z+j6r4JY+xWzT+
+r4iw7dOMvYe58Lzt33ONeqRsVft3wUgHeQnF/0xvf1sY9chn7DB6VKNV8Ze
hR9+N26lY1Vjr8Idw152CDtt7LrOYu+5r+pd9nXBOOXs/2Sf33zt7igzv7P/
c2Zoge0nvpr5UeOaz56TZ5m/0QPySVqPLTzotbEfkK8wqF36kfuNHWgft590
VP6f975PTxo9IN844dPnOhXjtV/Arwe1vDpka7TW7xns6virg7oV3KN8g9jP
A7yXBg088ETHf76bOVu2QXPKBul8xL5NyTQ3/fc+MPULH3AkoUiRaGNHcS68
x6fbkZBJplzIp85UuOGTlyYd5Dt/Grk8xQGjH01f4u2TDvL/VLt77JqbsZOR
r1NjtG+34xHaL/KInTw2fl/ZWSkf63zUWezzfJ99l07uHWrsCkn/dN1Tvo1u
RvgwH40Su7T33A73bl6N0vJyj3J3MesU9yem3uHOq092yfDNtB/Oo39zLtD8
aLDRD/Lzsh95W7iv6Xcahz+4sn/CE9OPkF8hcfJJR98ZHn7wbPuHUaoH5NOm
3za4frY4nR/1/d+RTTP1HB2r7UHfI3O6tXNBT2NPIr9b/LvRD3Z1jQpt5xdI
Zs71uDeatdaib2OcjX0Ff+notmzASqM3eJ6DM/Kkb2D6KefgfX/7kG/UF7Me
Qf7t1y7W+RfNOhT5NJmOZuz3c9xm3MCuXhPWpmZma7CxiySdhOgdm6b1DVH9
6Hu2JfumnPPOqvpBfsu1ItleNo9X/SA/Svzckdf7AE+CZtX9PcqHfQzs6pmv
pwfGTgtXvWGfP+4Qf+hdlNED91pDvk+/Njljgt06xcGl0NBVjWbGG7uRc/ZW
jaukTvQz86mPfNdrSe6LF1q/VLuRdNxvpNuZN9T0C/i+0QMcp+2PVv2Q/vD6
gxKrXjXtB/mrl/pmWhMUbNZrYj93r5Gk9rlRz5U3kH2/PrEppt5vdVf1g72d
tWT/WiObRZp7I2JXfwjLmv1ruwTl7DffKDtwy7jOpt/Bs7373LJ0K9O/uC+/
oeuudNOnhirnnvblF/k/+F4x57l67r99TK/ss8169ozsT1Zq0XVhrZ0vzL4f
756V7fq6Q79Q1bO+U3FrXD/Pz7GqT/gkn4Xxm29HqH7gLzauuHuhl7Fv+fm1
ZI1tz3f7Kd8u64WVzSptzJvnltbLOcnnnbWl5nYce1V5GdkvjViSfvaZb/d1
vqC860rEt9y3zF/331hf7Doe2O/oK2O3s35JKfYknHvc7i9zvPe3mPkCnq5g
8NaBE8y6Bl6vZub1MWnNuby+3xW4qmnu7fFaXnjX7+FOfu0fqN7iJJ/7Hn08
P2rFTnOeIvu9sbefXu/aztxnI53ebrtj0pYKVXnuOby/VPn8rtnm/Ih72q8/
euVOf8iUi3VTysNNH20qae4lxsp+7LgMEY0nVwjRcazhzBqTnG4kdznVfXfV
5Bfu+zDO9yC+uuwnI39W9nufl06940r7IJUnPy0kPrmuE3n/7aVzg30lzf0H
ePlykWemFk9QPcPz12sS0Tog3IyHUq7fP+5YFpxwVe0u9pkr+w/eMHKUObci
naEBS9/lmh+u8tyjKLMszuHjo+eqf+Q/d+sY9Lix2S9F/r74M7L+WiT/r7Ss
p2if3OcvObfrmRPvzHwEb9OkcpXLu3+5VyPrRO992TLvnxqovLysE2tNKJch
Tzlzf5j7/GFVL5xNc36vj847sk60zlj+R6aVV7S+ND5VisCblpahWl/w5RL3
G3n24Wf2a9L61JYIrUfkt8xNE3yhjqlHeMdZzS9+fhVp9luEz3XI3N89XYTq
n/SbtSo4dV4Js+5A3vfQ0b8GbDf617hNEl9F17PCG58JCfcfGaPpsx7MdjzL
3jV7zPqF9U6xjV5767yI0nTgTWNdWubtaOZB7JAk72dGOmWLNv5xMr8sHNvs
c77vZh3EfHRg5Y1ZccNCdR5h/Oz0ZfK1kmciTT0Kj0zi8bp45RDNv457rv0K
TmwUrOno+3jH9k5K2ipa2wntdkRMydXux0OUo89crgGnf/QK0PLqO8UOVvdj
TtFqn7Bu7T/2etyu5XGaH/jU4OXdN74w5/gRsg+/sNau1RF+xn4ubbe+IH1+
+szIVffi7DhzX0j2xy6livZ6m9Wc73AeZ5H4zHBX4Q2Ekw77WpH5W6T3umb2
hSrI/HIjfPbX8s9Mu+XcbbfEbYYvtovnrOebMq+tr9mr7stYk/+xcr72e43T
sx7MNOdicTIu7QzfsmfnNpO+r+w7VZd4znB/4ZWF2/fTlcTnl/QryPjgkrfE
pt9/9kf6Lz8T+9yIf7jA2PmcL2T6WMrRWtXsSyTIfvVg2a+mnTyWffL8BYaX
mJchXvlQWY/crhFzd8ojI+8l+Urdfttc34/GXnWU/fOIIo+vZVls9ie7yn71
miY9StaZa9YFTWRf2v9M1tYVDhv7v5TsM9+322eegF0p+4F8t4+k/7jjiV51
qhn+rc1/dnjGG6uj5lc1+/Nxsn/7xndRtwYRZp8kWnj7K3UKX39r8k+7ndzn
8fwgT7M/fFLs22jZN6adnBL759Omvm1bRJl9dfibgJEZvZ/EaHuIFvvhtt0+
qoPsl+4NLHGgU15zTtpI5vHimY4/bNMwQXkumTeLHJha5nC46V9licNgp7fG
ks7z8s3Tj8hsxucckk7ArbeXqrjHKz8l9sCDdAXThQaY8TlB2n+zZ3fb3Pnl
/g/zJu0E3l3mwQnb/UcFzzD1O9IuTi88n8x37WRflO/ys37mRmNzrDS8q6Sf
fkCA17LW5vz0q9yzGpx5ip/7A9Mv7ON1kw7r0OB6eQMvXTXtgXXZguL9Wn27
Zs4R4CskzifynOOML7lhas1thrMuWz0zxmPmKavd/YokLjNe3xvQc5CRZz7K
m+LEsCofEnRdzL2Fzwdupfb6avZtuFdwz65dMR+N2v6gVfZnhrMeWZeq076G
Mb+c70s6Wc/7zLj2zHyX+wm9Mk7Y+VsWs3/O/FVA4qnCNU6+3TjMPQT2+Wkn
GndncJaVh32MPLyajJ+6XhZ+P1/FyXNGmvrFjvpT2hXy2Ht1ujmtORZp5jXs
qzUSR5F09D0RiQuq63GR7yDtE72x790ucF3ucw3ildMOF8+s71hknrkPUF32
h8fWXtNk/y/n6QO41ydxhOD/2MWlhH+Q/dU0dufv3B/o5PZ1d8Eww7PLPvOL
1SnKl9pjeGvZ1x3it67j+BCzzv1LxttTAdt3/Egw8thFX9vNv7ZwpRlvWbeO
2Z8+1Z+bzP7ANmnnK+3OubCLfAIvLPNdburdPt6g7mPIOHbvtkualUfMfibt
akbe3q977jTzFzz9iN19Ow6LM+t9+Xv/Es9KfQwy60rs8xv1n/QqdM1w7rck
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
    "], {{
      {GrayLevel[1], EdgeForm[None], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1: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
zU3v/1D7Uer/q/B+Oo4R/lvDPKal9Bz6630ep/5/CP9H/U9k7/GtBceozxKC
v6nPY7p2qtrXEzxebX8ik7Df9e4egrYK/lh4bX6LvF14ff4h/HYdi6rvr7Xp
JPPcGv4DbWuabx2i42ed/oq8JDxTeyvofGHaeZ7wCbp2vvpsKvh14TV8sMb8
Vtc2VZ/tBe/ILFMtL/imnrue8NfUd5rw9YW/Lvwr9fsH2pCbr8Hf0AluKc1b
flHbUYXp4pU6fyHzt95W8Ga959207s4SbK3jbPgP9wrvgZwg2EbHBewvtV+U
m3a2Fry1NM9thU6Tuc9mvE+9v7/VZxUd5+q5TY3ztvqfkFivWU3t3+r4oGl5
q7/6f9a0jP6u8JmCz/NtNP4jgsshy2icj9T+VG7d6Rm1D1T7asLvEf6I4Dhd
W4b1LviKjpWFbyB4uMb8umldq5fwN+ChOvYVvpzm87rwNzTvR6FFgnfo9+yr
9qGC/QXf0vXloLWaw0+CUzXmXOi78GcFD9M4XwpfUcdY9UcRRM85RO2fC64A
XVfbQHQ64Y/rnimC9wu+J9hexwTeu37P6/ByPXcO8oraPtYzD1K/H4T/mJmW
QhtbodOpz3esHd33nfC91P4T66j2umX9bqA5rJ9a3vtM4wxFjhK8T/1XEPwf
Mq+euW/Te/4atf+uMb9T+xfIc2qbrXG2V58D1ecrtZ2n6yup/V9+n853FP6F
+nxfms5/I/wq4buzd4SPQLYTPkv4tegJuv971mTu/YsMelhuvYD9cr/6dGRN
q88aehc3sgbUdmTTe6qvjl+Cp/RRv4917Xvhlwl2jnnCtz4qDS8R/C3zfPqp
/zT12VN95up8dGb+1kbw09L86ArBT0q/88sFb838Pttm1g1Ys700r/c11prw
VcFTUuuk6K4LC+8S4xdqW4O1zjdT+3bCv2TvBT9hDy+Z+Ll8v81Kr/29NP6q
6r837xw+lFhv411/m3lt9NRze8BvQva7J7c8sKrgvbnlidGCN+jefiHDXCPY
NrGMMkXjjNE43TLLKeDt9fy70buhm3r/kzO//x3h79gg0AsEVyrdf5PKchN7
cAW1HZfaLoHOv4zwnWNdLZEYsp4OEP682tvo+Fv479BxHXur/3NNy15jkVk1
h6Ukq9yeW6ZdWXB2brn2jqCvRzS9Hlif8IbvoNm1dc3nar8j3tUeyAMaf3p8
+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
G+j/4h7u5Z5XUvMd/CI3CjYDPym1vwT+WabWm/ADEs/Eb+mrsR9N7DvBnvYu
PgO1D9Ozb+FZiX0qGxW2yfyj65naT0xsjyamZWO1vS94W2G73L8637j0/uD9
4x/5Ts+f2jDthf8if2IAwXfD805NbeMu0ScS64PMs9LxEXJUZryO8+1Kj4ed
5LzCuuMHeu5Tie0p+MJfS61L4h/dvbDe3V5wucL65Ufqv6fm91zD3wU7C3M7
tbIMz5qHb84J2Ru792nQtsT+PNY1ewR7OnbvlRPrM6sU1j26ZNY/0UOJxepU
+jo60ZqF+++KHa6w/R0b4+DUOh5xQ8S4LZJYB4cXEHuBTIJNZOnEOgC8a6nE
vrE1U/snsMWi92CHR9+YGXZL/K3I1fgD8DcQm4ftFb0dP/h26ndubR8qNrBj
Nd87Q95G7n6scizfoYLHF+bN7XLzW+IH4HnQ9l2Cps8OHN8BvJU+9GetjYv1
dkLhuRLX8Gfl+I7fKq8j+uDLoz9rdEbDsYPIFIfWli/aJz5/FLlF+MDKtmRw
7Mm3hI0XWy80E1mHdTkktW+gg471S9P+Q2rr4/jxD6ksby6fWOYklqFNYnvQ
rNAl8W81Mz+HWMdJYbchhofYlXn2oqZtRuCnlbZ/YQc7obIsga3siobjklZP
rLtMDl7OmsOORh/spch79CGWiTgZnoXfF12VMdHBX457kQF+y+1XXAu/Ym75
itiT74MnwlO+SSxLoHv+kPub8m1/ye0/Wa2w/Q473kmhz4IjT+P7wzb1T8Px
Y+y1tZqOk2T/4ruaETQf2t83ZMUOTfNB8Em69mDQ205q/1vP7QjvQEYOHQE/
6x9Bh99o2ObMHkR/nBj2saOFf55YZr5ZfUamHvNN4R9mXjtHsB+DJsDnqpjn
x8I/0rX3GRt7SNifV+W5ueOIiCfCXondEp/dgkFnsNnOlxr/tGH7M33wvxxR
mUbja5ucmtZD848KHoHejD2B+KKh7Es9Yz7Wrt754MptxJehIyDzDw59Af3r
JOHDEvvQ+e5p4bi8G9A/8IMkjgfYX2tvadar4HyFY8xWEBySOJYJnwTrrV+s
mVVyy3v4+h4JvsC7OzOxXZv1vFTu+zoWjmtj/sx7Pz2jja4t1GK7COPzvMGJ
bSb8nnExJvuaWAXi3HLkssSxXifHGkY+H92wb7FPzG353PrCKGTqxLYnfju2
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
XynfBnmJ6/hckUkmR3/wI2vHnxYttuEhF64d7/7oeP/4ZI+P70sMKzYDfLjo
PfASaBQ+evzlyHP4SPGVEiNFzOOI2JvEWl6dOn/s2tT1H6Ab8C/yw9E7tq/8
ffC3EwtITODdIf9eG/3x/RMD8GLI9VfFfmc8xif+k3V0RvwW9GD0YWolIKeh
A68T7cQBoCPj78fvX4fvDH3jvzhV9MD/9PKhsRemBU9BZnk2+iO3zYnfC81D
L7ky6NXVgaMbsb5YZ8QrII8fGt+O3DhiIIgDII+PNcraJn6JduzUxBXwbvEZ
863xLSFzJ7Xb8Cffil06dW0Q4hf4LtBl5NRB8U6IdSHfHPmTWH70TOgdPjF8
Y2NCNrgi+pCXi8yO33lG9Cdv/JLCMUebZ16n3Mv6v7Pw+NfkhoyDzELuJDn7
5O5jq8G/xXq6TvMfpzGO1Py/IT4vc5we/lDsHo8Izi2ch7suMe/E82WO8ftZ
7XurfYPatU6wj+O7J5cSv/zYwnUeyCWZr3Ss58ENx3ESa0jM4X7q+7P6PJQ5
zvBLbERqX1ttcwrnAq8j/ITaNSl2Lp23Rd7RziFLIuch451Uuz7FLqVr02BX
I96A94SfGx/3V4XzptdjfB0/ZY4XxQdOH+LAiBUn5wh/9o/YtAX3Zr9m/r29
dL5M5thS8srJn8HWfbj6LK5nn6L2LYUvXLk+CbkJ5+b2dZV6fl66Bs5hpWvF
4K/pLvhB7RgFcveq0vGxm6ltIeGHCt9c+B/4qoRvWDt/lvF5DrlO2KK2yp33
SowcMdoz1H8z9V+9dlw9uSHEWxBLD0+gns17hfPK16gtL/M+kdU2yc0ryCO8
gLwA5L/cOZz89vXV//3C+ddrCv+gcP71WsI/LJwHSj4oeRAnsfZr6zDIa/uG
zoSeg5xGvSDiWtCV5+m3Deva6HPodcSpoKcSm4I+iu4KzUNXvbQwTyBm8rLC
dXWeyx3Tw54ejg5YGy4revu2xhgd/BQ/PfQD2rNNGf0rx9hj/yBf/7bU+l+r
2ji5++fVjrOHVvUonD+GXnZU9Lk97rkq9Mo9wqZ4R+rcNHTBMUHfyLFAF9og
nsF95LsR088cmNvU0ve/VVq33yJoJLIucicyJ/ImOPImvtZHUvsY4Vf3B83E
n0Uex8jKeh7t/+l66K7I2IMS64rI2ORsIFP3Kpyjgb5L/jc+MmwKxC4drzkf
l7luDPEFj6aOQyBXndovIwvrd/xGZJ2FW2xjhbbgz0Lfo44UeXfI1PuzNmrr
KNSEGV7aJtpa9x1Xe7zlWvw7mDOyHPUgDml4n5JX+GBqmXG6xiRO6C3BvwrX
f9hYfX4rXOdhI+FDatcw2ktjnFq7Xs9upW1Q8NHt1fes2vWM9iY2o3b9o32E
n1O7hlEvYjWF34esJPzC2nWp+gq/pHatn37CT65dT2dX4RfUrlfVR/hptWv6
dBc+qHYdnx7CJ+nZS2ieK6rt5tr1s05S+02162edKHxo7ZpHK9SODebdU8Ng
uM7vh+aqz5m1awD1FH5G7dpAewi/tHa9oQNZF7VrA+1een2PiLWPHRidjZyU
YbVrIe2rPtNq56XvBKydr7uD4Ou183K3r52nhHyDbQeZBzsQvoj3GDN3HA42
r/9i2V7Q+SO6dxPBd3S8nDuP/mXeT+76CS8Fz4I24jvrqvua8Gv4lto3Fbyj
ds2soZrn+bXrhR1Q2gaIvQ4ZZmrtmg7bQJ8FO2q4f/R7X61dg2DbsHtjC0A/
nVy7LgN0+JXa9RGg81Nq1xfYqrZNGL5Ort7lOn9A7f2xd9WujXJO6ZobyAPI
3e3hnanjG6mbNLPhWh3YqnqG7QrZ6r2Q3+4K+gadeys1LYOOkd9InuNC8Ija
9RR+0pi/C38+cywx75s6DNRjOKV23agOgku22BZwtPC2ws8SfmztmlkHNfwt
itK8m3e7YItjROB3i7aYdr9ZuZ7YO6nrISzRYvss9BC+Oj146ymZ1/McnS+j
Ps9mrkHUTvjRhWOwpxeui0KdFewK2BeIU+ddUX9h3dI16KDhVwhezTrLzE+v
ifVzeBm2tYbroLxUuFbJSqylwnXbOtbmSfAmci6o4Tar4RonN6j98cwxbNfX
rkFzTOkaHXXT+YzXxno7Qm0zatMa6qX0wa/cdC5Y1WLeSQ2xaYVruaxWu6Yc
vHqw4OWZ88VqwXcyxwP2EZxcuNYKdWIuql3PbmX2jdpXV/sq7LvCtWJWrV2P
7nPhyyOztJh/E59J7Ohr+CpabNvAJoLuwH6bHPoIPAVexHpDD8UGTd47udbk
zZE7Ta5aj9z5gtSgm9N0viF2J+xIn1WOkcbnRIzGhqXXKntwv8xxxdSt+zZ1
HjeyBLZ6bPgfV66bA2+Etlwa8Q/EQTxWuD90aZzwNg3TyccL58FBx8YXnic0
84DMcc3Ur6BmHzlu0L0pheutQQdeiTXGu6VeCjm55OYemDkekLoZfeJb8O6w
OWCnmF3ZVoA+T04osjCxnNRoIUcAXwVxOtT9Q5ZDpiNXmrxp8oLIiSamndoS
2PDxEVBbkbwg6sCcnFsGJz+aOjHUKCPO68jcvh5sauTMnhW6BjoHeWjYG6hd
RQ4dMTnE5lDrDFp3amFbIjW5yHvFzrO98J8r1xOBrlAHkNpA1Aj6LHPtQeLL
ycklv45YA2ozkReGf4uYGnJz0DWpE7lq6Zhq6Bs1o7CHkMOHzR+7wwxsQYXr
McIrny1csxEeSm0f6mWR30pdBWyc5H93EH51wzyF2GtisKkXsTL0tGG+83Dh
Wn/w07dC5oRuPFq4Xh98nHhd/L7ExZDzdmvD9TveLpyDD1+m3gi6Pjkl1K4i
TpYaDi9nzsPdQbBN6ZxHauqQ00cMykqCt9auQdYFHaF03je8r0PEFZBD0xae
2jBPeS1zPYrdBW+rXedrx9o5WuQvUNvincJ1IeDLxC6TD8t6Olz4uw3LM+QD
kBtFnPpHhfPRkLfJJ8eXSf23MbVrde0s+FbsQfbiq4VrQSCfPFO4ZiayzYTC
dTWRhaYWrkOIfEK9F+ogkOt6dtiOsCEdljm+ldo+DxSu94iOVgdNg15QYJB9
Te1NarKsRJ/ccdfYebAbfZC69uDnyFWZ7ZfUyXmocH3IXUIOxF5HPRVqy1Dv
60PBBwvXouwm/P3UdQtnZuaj8FNy5KmzROw1cgL6HLZGaiixJ8i9x+5LbQ7i
7omtJD/7ibAhEEtJPOSoyrZ4bPLYjbGFY5fHBo8dFLsq9pZ5eaWpbSPkt6B/
/yq4WOmaTsgJ5B89ldq/S8wVMTrUL8G+OCHsGNgOsSESi4ctEpskvtR5+X2p
bZLYVrGxYq/ZI+7FPklOCjla2IOxE2N3xhdKfZxf4zdiL8Y+gd+zR8wZOwnx
PcT5EM9LHg7+9j8q2/Cw2aGbEQf3cmodErsI9hH8puRhYDfBZkLONnEoyBL4
DLFnYcsixnrF0EGIBScG7vrKtrHJoQMSU01s9r+VbTCMSbwLuR08C5vL8TEm
+iD+xykhC2EDJCcc3ZX8FWxk6Ir9Y/7Ym7CJYjPFZrFPvENs1PhMifv/pGH7
Dfdi88Lmyvj4N3kPb8Q4yCBvxnPvKCzjYHsh1paYbOJtyfHEB3FE4RqF5HhR
56suXVsD+QH9Dj2wtd5VWboGIzIMtSPJ9SN+fLXM8ePUR6JmGbXLkEmoL0A7
cuafoWtPql03FZ5CPQ3sL9hhsPNgn8eez5qkdtA8+3ruWkPsqb7CD88dZ/x9
btsM9T2ok4qcRQ0B8j/JfaXGDbXE/kYebFjXwKZCzT1q7+Fjxd9NDgp124hf
OaCwvvhZ7FPkrVmx98lJR7elDh71KLF1fV25LhPrlvX7e+F6gOhZl4S9C7vX
9NI1fsm1py4HctqluW2b2CipfUv9L+xA1GakxiXvH7sYddyGB23fJHNeHXUm
N8icy0C9R+qO0Y7+RQ42uRHUTiQujv38d/gO2J/Ux2gt/KyGdTTqzZLDS72F
hWvbAfjW1C0iZ5G6jtS2oo7cXNZ+i2X9ZWrXKKCWAHV58fWwt9kX1HRjztSx
xD9F7j11f7EhUGMX3e0tdJPcuQlLls7fR9+5N+RO5Elyj6Fh1Fchfpsc79aF
658id1NvhDyIebkhuWsbzqulU9k30Cn2BDkCxAuSO0jeB7VQWT/URcR2tF9l
mjIvxr5wbh45eujXxN8SL0VtBmpQw9PIwSIGvlPoF9RcxUdKTVZieYlhGxs4
Mgl1S9Az0TfJ18Fuz/4n95R6r9A/cv/JmSHG8cTC9cGQ1ZHZ0TXJ5yI/Czkc
XeaewnIS8hL6FDVp8UGRw90/d044ueEH6NpWTdd2IJYA+w4+emppUvNtg8p1
mMkhIf+1r479mq7tQA4asvTzueOiiZGmpsf04NnwbmqUsadmls4pIIfwT2yc
lfc48iN1aZBjLxbsnTn2mj7E+p8etOiu0HWxFUwK3YeagdRSoG4KNUGpT3Vg
w7n45F9A08mx61455w1Zjph2YrCozXNnbb0OXZJcCWgx+V7TYj+yL8kjIE6X
un3EWxLrQ/70qNr1dr+snEOIbZ4cYXINiC3GL0mNa2IeiSelxjW16fpXzk8h
FpO8bXIK8PFQGwmdknxParWy9qmDRz08agGhM7OniI3H7kr8JLbB0aE7EzdC
HAY2vd9L594j85ObgLxHPULqFGFzwPaAjkjNOmrXUZ8cnw854O/Wzo18u7Ld
gvrG1DsmjpSYXmJ7yZEhDpV83Lmx96mfQ7w3uk+3wvYu7GDYw6hRCR+gVjG+
Fnwy0LUvS9Nh6DF5HNj+iJWlHiNrkrVJbggx1tifidMe1nDNYGRU8hqoKfhh
7Zqe6I/kSpAfQTwweWjkox1TOL8GHkxuOnWi8JlTP5IYFezy0HbyzLE7UvOZ
un/Y+6nfQK086u6uVdnmQ7wTtgPiNonzIDaAGCfasCtQBwTZhxxk6hhQv4f6
avfXrvuJzktuPjn1Nwk+UrvWKvZnagOyv9hn1B2hBgn1dajdQU0d6umyJ9mb
1EEiZoaYCWyPT9Te2weH7YR6PtQefrx2vUt8B8/UtvVhh3+sdm1Z/BTP1ra5
YVekLhK0DppHHRV4aKa2E2vX3UZeJdeU9UzNxYlhL8I+OaF2rVJ8K+Nq16XF
JzK+di1afDFja9c6xDZ4d+26sdg0iFseFDIV9bjILb8O+bx2jVTsD0/XrouK
DZ8cOmRW6OF9tevMYlu4p3b9WWwmxAvhT8UO/FptvQh9Bx8DvgZqUFMLghoC
1Oegfjt68Y+l/ezYZA8tXFufWGZydakRgWxD3Qtyk8mrI++TGuzovz+UrpNA
bvZjuePNkCOpkUBtDfKYqCdBTTp8/NivqIFJ/DS5F2+GroVuhe2CGnvU3fkw
dAdqNw3ILKNSY+HB2vVn8ZUsnTm2gDkT84Efm9pZV8VeY89R9wbf6pe51zRr
m/pR1GQh5xkeSqwdCgl0oH/QLr45ddWosUCNb3LHiLcj/5UYFWRFZB5qzpCr
Sa3Eh2rXw8VHQ7wBMiv1bLCZoauwN8k9xv9MbVHiKIjnga5S2wE/0VnIb7Vr
B+OvIXaQ/tz3f/dGWhk=
            "]], Polygon3DBox[CompressedData["
1:eJxFnAnUV9P3xu/9fu+9596XCFFpUIZMkRApopQiY0TmEIUoY8oQTQhpQBKV
ikLGTFFoMA+JDBn7JTJnHir8n0/PXeu/1nvWe/aZ7nTOPns/+znfpqf363Z+
JYqiF5Io0l90XBZFG1ejqL7SkWkU3SB5hPIvqlE75d9XWfM4ii5T2bWSP5V8
lfJXKo2U/E4eRf+o7d9qc57yv4UoulD57TT4oiKKNlT7iuSrlXZTWUVl56nv
EPVtWBNF3+v/qbqPmap7RnWr1X4njbeb2pyh/I0a70fVn6r8Z6rfUf/raazZ
Sl3U91D1u0f1b0p+VHV7K+2g/AXqP0z1G6n/INU/rXavFa7vp7qf1eZ15X9X
/cXKN1P9i6pP9QzXSL5cda9Kvj7zs26se/pcZYdJ/kv5BRqznvLvqSySvEz/
+mqMI1X2j/pfqj7DlX9T4/2t+iWqv135t9S+f9X3MFT17SS3VPu5atNW8nK1
aai6rip7TvkDdX/TJI9TXWO9r80lX6+xnte1Xtf97an/l0quqn0tjVVX9SPL
7/uG6htIvl3yS5LfkvyFxmyh8fpovHoar7HqJ6n+VdUvVv22kh+UvFjyO5JH
8Q0k76c+fdWns8rvkjxf15uhuqDUmrkhebDyWygVyo9Saq22r0j+Ufm31Odj
yfU1/mjlFyr/psafp/qtVX+6xrhC41+eOX8GcyxzIt+/4vc9VWl+1XPgV/Wd
rjRP+e1Vv7PqXpT8Dd9W11ima0yUPFH5Q9XnQtV/puevq/zBvHO+jdKDyk9Q
uy31Pj7PvRZWqc8NutcmKj+CtaF0sfrfqHSD8m/reu2VP593Ivk+jXGb2n6i
/nUkt1H/D9S/ne7hBuXHqmyU2v6u1EfyQyp/Xs9foz6x+l6l1EJl+6ReH5nG
/0j539S+t9o/qLrn1P4HjdlbbRtKnif5TP2/W+2/jv28P6n+HOXPUt9nVf+9
5DMlN1DdXMk38Qxq/47G76h8prLxqp+v+kZ6/qZqP0PXe0PyEtXdnvre31aa
yVpVaqT8D2rTQ3Uf63k3k9xZYzyj/E9K7SWfp3b1a/z+NlHd3UoXqexpye8p
P0/939c1WrPeJZ+jPteofitdf7LqXlPd27r+7pJnS95d7b6QfJzKx6vtYvV5
R/mDVX6P5OlKt6h/h8Lzj3n4P+U7qP9r6n+/6prqfg7U/yUVvwPeBe+Yd/2J
2nyOflL7K9F3Kv9V/Qem/jZ8o0L5GXq+sWr/JDoit95Af/yp/g8of6/Kblb9
pip7SGPtrPSA6t6lTuP9IfkS9JPG+lnyX5L/VX0q+RfJr+n/T6r/RekNyjTe
FOVrlGYG61X06x88k/KXqM0gyf9JzpTfSO1vkDwE3VbOrwtUd5PKhjG2nvkC
5c8njz7UmM+o/kONNVPyWZLPk7yL5LHML8l9JTeXPEbyUPSB+udKmynfS/Xn
qn5n1Y9GP2v80Xr+J1S/ifJz1eZT5T9Hnynfk32BtaH3/wH51HOXOTy6XB/H
q75/+X6u1P8hqk+UNlZ+U/U5XPnDlCYq/yB6WvkzWP/KT1J6WvJJkrdhL2C9
Kr+ZyppK3l7ySMn38AzKT9T72k5yG8mL9Syb6pozdS+tJb8puZnqZ/D+1Xaa
6u6RfKPa38scUX6q0rWSp6Pzle9XWLewl9atsV5Bv3RXm4bKn64xO+j5auve
R7Ge1ed21WdK96juebVZqXxv3cNVuuY2Steo74Yq25I5rX4r1H8PyftLvlR9
hkhuo/IpGm+Wyl5U3d4V68d7lZ6X/I3k7ZV/Wel7ye0kr1N+tvo3kvyU8ivU
f47+L5Pclj1d+bnB+nleuf76J14rLVS2XPlJuv+r1Xa4yq5WfoDaD1W+LXpJ
7bdRWin5C8mfKh/rebqo/VqVXaoxv5V8svL3qv5p1f+t/6dJPg+dwPzXeGsk
/6fyH1k/+t9T8rmq78McUf3fkv9R+Q+qP0fpFclnSF6m/Ee6p0zvcje1P0r5
XdR+rurfU/1S1Z+t9AL2heQPlN9e9U9KXiL5XcnLdX891fc03ls5HmvzbfYX
5Y9SfaLxEz1TI+XfVbt/Vf8h95hYT6Ovf5Y8XfkTcu+FZ/MeNd6+an+F+hfq
/zH7B3ZO5LLrNN543c/vkd/F52pfn/cT2yaaqvyrGu9b9B33oflWW+0O0Vhj
VDaCPU1tzohtU01T/jel49S3j8rOVP25GvNVyb1U/pHyIzLbelW1/5C1Kfkk
1d+j+qdUv0L386vkXyV/LXkzbB6N1UHpTuVXqf5k5U9R3+9U/5PKuqn9KbFt
uC9Uf4LyJ7BPq/5LySexXpkLko/Mrf9eTf09Fuj6W6j/CI0zXPIBqv+I8SW/
LzmRvE71s3k2yd+p/SmSZ0iegz2j//3Vfmc9z33Kr1Z9P8l9Nf5qxpO8uOI9
nb39At3P5eq/l9reyfrU/0MkHx97vzsP/c36U/kE1rqu/5XqXmBfk7yT6u9H
f5br6f0c48x724eSj5C8mrmr/h9LPkzt9lKTI1R2rPLH57Ynl6b+HucH23fY
eXdI7ou9yn4o+XbJ/6r9SRp/kMZvoO/fI/f8eyf1/L+QZ0CfJLa3L5b8idpv
ojGu1ViD1e9L1Z+tsquVf0apluoGq/1gtX1CMrc0SPIgyU9L3kDylZKvlDwb
G0LyAMmXYV/k1i/omVq63iPZ+sePLmavUv2jmf2OS7BbJS9Tu13U/uJy/Tyl
VMP8V/0Vql/HGtMAU1S2m/KPqR6T+1LVD1D9pZK7YX/xDlX2pGQVR5crfzn2
PDas6m/TNS5U/81Vf66u9b7kk5kjkjdU+6uUv0ptf81tz2HX/S35GJU/rPoz
2UNU9gY6WfLNKh+p+gskH6z2d6jsIOak5D2Uv0P5m1X/IN8dfyryfvebxu8i
uZauf1/wN/hCdRcl/jYPqn6artWS+9KLeAAfo2ofDF/sArV5ILYt1kT19+n/
UtWPKe3LqRrvH433OHaS2q7Nbbs+rj4Dld9SbS7U+LOVWmf+/uw1L6vP6erz
nuTdlZ9Q7k8b597v2fcnS84lD8fWww+Q/E1u+3+S+k2S3Ftyk4p1aofcdg72
zqW8f3wBpWaq34n3pXyVOV61z/ZSsD80UPVz2JM15jGp93r2/O7K/6H0ivKT
Vb9r5vWJLVpX8grVva6yrSWPUvn1GnsT/FHJ88r9sUvu+X54uR7/DbafsKNu
KWwP8y7xoeoz8ZWuUP0A1d+qukpuexC78DbWu/6fomvfqbSLxtxU412kbs+V
+99k1U+VfKLqN2at5LZnsGsmFl5zrL1tYu/3U1Q/TG23ZZ3h72Fvqu5axins
z2JvzSn10/cq35a1o7Ku6FCVf4dtjk2kMdam3h/uV5s98UeVtlX9aPySwvZl
J11/rMqaKH+I6n9S2/OU6nIPare36hqrTU/JXROvxW8r9r8PUlpZ8TvA3sN/
qqe2J2W2f1Yl7ruV0mmZ/Xf6YqNgq2D/oyDWSV6CfcT9VW2jd8CX1njHVa1T
0a2MwVjo7P2VP4f1Jrl7ZB/njdz+OX76ZjX2d8ESVrNm1f8z/KKK59hWavOv
5Ar2qtI+klep/V5V2+TY5l9KbiW5F98HX0fv7DHJE/jWGr+X/u8keQulb/Bp
Nd7DFa+xBqr7OjGWwjPxbOgffJ/fVXZo5jnOXB+gtJ/69sAOYn+V3JV3q2vu
Tl9d/3/KP6G0iLaq20TXH4i9XHUf+uJ34X/dGdtfP5g1ovZ9lOoo/zZrTHW3
Kn8da099UrXvoPrPlD+FZ1R+ue7lWtU/x3Nq7CGqu0by87xXyUMlDwHL0f+q
+rdXn08T70PsR+/Evv9jlDaSPAMdzJrT9buobmvlb1L/pug59S1U3035WGWn
VUubM3h+7x97jO6Z9RdYykPqsxfzI/X+9qDkVpJfUKqj+mG6l6Eaaz7vXPJw
ycMkn5h5fj6kdLvy/+l5T1V+Dnt+8PrZsepv2qt8R/iY+8V+d8cp3yVyG9ZX
x2D7Dztwc32P/Qv7ivhay9mIlHqif7EZ1PZT9iDJx2PXqP3PkjtKnsoemNsf
aFc1ZrAl35r7Vf563deIwv3oX0vpS5VNk7wQ/xx/hLWb2tbBZsTGwQ7DHjtV
qafy8zXm0oqfYSXvnm9U8Z50S+pvxLcCEzw28ztcW/Wex7vlm6+pWscyF5gT
f0tuGnmu8I7XVa1jePfMoU4at23subVn8H7Ivrh1jZ8Jg2D7yM/KN+RbNovt
n2AzfFb1HMSW2AKbRPJd6IEa/0fuqj7VzHgUvvCT5Z7EN+Zbg1mcovxR+GNV
YzQ9WEOF9dstuocvla+Vee08g82hfCelkfhHkifzvGr3l/JN+Calv3hf1WMw
VufMvhaYE9jTHZl1yeOsSeWPUNkssK2K1wCYBdhFQ7Xpwr2nXovYRNhG6Bn0
DTrubOXvQYcr/3Hk9dpQ11wieYXadwZ/Te37YbNguxyODxzZpx2f+Zl4to1j
+6PYWD9Krh/Z9upTeC0cn9ienZ/avn219Kmw+X5S+y0j24KH4GNWjcGgU3pn
xhfxCfANdlB996p9UHzRF3JjT53xCdX2wMR7Dxgb+NB9qXU9fQYwvtqviu3T
vRqMg4KHorPHZrbZfpHcILIth833fdVrBlsQm3Rl1ToAWxWbcUXVOgJbEhv3
t/L9Y/s2KIx1zdI1f8e3xeesen89Hf2XG/s7SPKKzDbs8qp1IrbtDKXFVes0
8PGT1H6Tir/BG7r/e1X2luo3qNi/w6b+VnLdyLZ2c6U7VPdSbHsTTBhsuFa5
X32v9/W92m4h+UzJv6TGWuZpjLsz43XYh9iE2IY9c7fFh1mp6++ksnGSj68Y
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
N6aO/XLGg/Me/wdvFa3T
            "]], Polygon3DBox[CompressedData["
1:eJwt1nl0VsUdxvErCXl52VQMobiwE4ulKCBCAZEUEGSJGsAiAYFAAq3IXirW
vaYFpYJAq1CleBSoFgWNIEpbFpXFKhwRrNVSRUGFoD0aT7Ei0M/vXP54cuf5
3md+d/LembnTsmxqyZRaSZKsoNr0/WySPJSbJCdzkuQUPcu3prux43xzmbmZ
JHmPBp6VJCPykuQT9+7nT2mfpP9p/8K9E67f0a3aMxU/JVei1lQaJVdKPdT7
p8x8+sL94XLF8gf4S+SWYPWoL7Yvk45vEZ+lOjSffxg/rl2m7zi5o/xJmqM9
q3b6jw2T+wH9Tq4+XQnv9fz22O/5BtQLewvrgD3G59Ng7D3sS5qp3lS1TuDX
ynSmVdotaZTcZzIdsRV8k8hg/8Iuw/7IF1Ax9j52Kbacb0xD4jfApmGTXCdS
P+ygaydspUwLKsWOYJdjq/lWNBo7ik2u47fxIi/TXm+Mvfg+tEl7uFyVXF++
1O8yjz/mXTbFXpO/D3sbu47WYO356fQS354mY+fEO6W/8Z1oFnYeP4Ve5Hca
U13tevHO1TxB3bHn3Fvk+g1/nH6kvQ57yPXbmCvUTXstttA1o38e9dTegC11
rc3nUg/t9dgjrl3oT9qt6SZjqVYnK1OHrsymY1rm2os2anehOXJnu//DmDN8
Q7oKe1vfK7Bn+HZUgdVgXbFn+UtoIvY1Nlv/v/IdaSbWiH/e77rWb/+m37qp
zAL+NP5L82U2VivegVo/we7V799++/P03Sw7DLsT+xJrgL2M9ZXdHnOeHsYu
lBlKd/D/kauPvSQ3HLsLq8EaYpuwEdivsA+xfGwLVoLdjn2O1cM2YuXGeIEx
Hza2NrRWphm23JgX8vm0CrvaWHbpew0NoCf5ItoSa4jmqddYbjJWS91z9MtV
o4la/bAdMv3incm1w86lB92vlKtHT+jbR+4VmSJaIPc9rIPcOrkZal4k92es
v9zrMgNpuVwz7Ea6j//I/9YY2yo/QO7v2KCY92p0VGukXCV/SK5AbptcVcwF
tZ+ibXJd5Qbruz/Wc6w3Ws1fQ2/EOqVV+rbS7y/USb8q2q1vd32HYD+X+SAn
3Uuf94zB2CzsAOaSPIcVY7OZgxibVPkz0DP2xP5I19NKfhC9pX0DrY+9Wb9r
Yx3yH+urmbyg7/Ux17BqrC72IpYTc8O4bjOQHLpBrQJjXIzluV+bbsGuok36
dstN30u8n/o0T/tu/erQjbHusJ76fM63NW828N1jz5bbiXWhMXLXYbepdcRY
2GSDPq005mCfYZ/SHL43bcZ60ly5Av1uyaRrfkc2XcexnktiHnheV3Wa0RT3
nsaWYe1jb/XcjXJLsGpjqdD/QnxxrElaLdc59ky5V+U+jjmjfZAK3Bsrcxgr
5T+iJtg4rJ3nLFarbuzR2BjscarUbqteU9lRMg9gBfz2+F08f5taO/gLYr/F
+tF4uavxA9iH6nXHxmbT9RrrtjdfRGXYo+oVesYXfH+agN2u71b9HuAf8Yzz
ZWZgL8c8iD1HfjxWLlvBT4x3oe4x9UfJ3S/3Y+x8bDv2Vax/7TX4d7Hv6/eE
/nPVKYyxy47GzqbHva/y2K9jrNn0Xd7KH8Y/oaey6ZrZd2bexvzdxw9VY4ix
ltROv9PxvY69ZGfsudSb9vBt6De56VkjzhyVfFuai53mC43zlTPrY/eZPSj2
or38RTEX3FuYl46z2Zl6v85N51nMt6f5I/63m2XuMZY74jvN5+NV7j+K/yG+
7bGn4RXGPEHuq1jv2MU0XzuHLtV3p+w7csWuZTFXsf18DU3Flug7QN2v+WO0
VL35WCMqjf0QO4Rt5jvTTVild/SuWiNpk3rd+GK8hi+XmSR/KNY5djI3PUvF
meo0ViM7TbsNfha+nJ+QSb+nW7LpNze+vRWZ9Fu8LZue0eKs9t/oq0/zeLbn
HueraXzMMezb+P7yhTHPtWtRB7ldeekZK85aTbFvYn/nyzPpt31rNv3+xzmg
DFuK5VFnfd/BxmAPRn2/U2vsjTi/ZNJv+/Zs+v2Pc8CnNNr4zsX7xHvLpOfC
OB82im8h/Zb/IPYJrCjOaTFX43+gZdoZulzff8S5CHtGe2i8S3U38GNpAX/C
WNq496bcOGxhrA2sLbYbG4TNjO9MzAVsXZxdY3/RLsZeUK8nP4xexcbG/I7v
Pj8izjDay/LSOVdfrfz4Vsg1wBvSSJlx1EP7fcpai/1lfkZVuek+Hvt5jnpD
5U7npmfbOOPGh+BOeg1bhK3AWsg1z6bfjfh+rPHsFvx0mqY9nS72jJtjbcT6
1W8/vStfpNY99Jh2f32b42viXEErscFYIbaOnxTrRvsotVTvCmwGdq/6T9Iu
/2+xZ/w0zhEyr9MeNXrE/4bt5auptb69sf8DwrSOQw==
            "]], 
           Polygon3DBox[{{1899, 1204, 1284, 2391, 1796, 1797}, {2370, 1218, 
            1088, 1087, 1303, 1959}, {1803, 1802, 2406, 1403, 1404, 2407}, {
            2123, 1474, 1115, 1116, 1475, 2124}}]},
          Annotation[#, "Charting`Private`Tag$788897#1"]& ]],
        Lighting->{{"Ambient", 
           RGBColor[0.312, 0.188, 0.4]}, {"Directional", 
           RGBColor[0.8, 0, 0], 
           ImageScaled[{2, 0, 2}]}, {"Directional", 
           RGBColor[0, 0.8, 0], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0, 0, 0.8], 
           ImageScaled[{0, 2, 2}]}}]}, {}, {}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0jtMVFEUheGN48hjGIbC2EgUKcRGGx4Vxl6sKCiksxMVtCCohQoU0FEp
DaCNSmdMgIZQYWM0FggyMjyGGCCEGGMIRjFGvhuSOfOvtfa+5+x7cs/d6G7r
KomI11Z/KiLRldhIvDkRUc3P4ll8j5dwHi/jMl7DHezAP3hgddK50ogHeAqH
sAZHsA5f4QWcwiZ8h+1lEb+dOersz3wf1h2z1/GIBf6v2rhske7Bf/yws17Q
X2S9+F+2RN/yTB5v41fMpyNS9krpuSNblk3z6WTJumQF2UO6VNbNr/B3cRXv
4Rqu2CejXqZvnZ+h12RZrJAVZet8js/wG8nd0VXWVe85z7+l9835yfse0HOy
CSzKGvRM8ufxJdbiM6zXO6Fe1DfIP+f76aeyPN6Xjcke0QOyrOduyn65n+u4
ja3Yobaop4U+bb6CvlbZR9lF2RPZSfoM/UGtWW1AluMfY3UyO1bxe5jFn1iJ
PzCD37ECd7E8+TbQaLGFm8n90t/QSLGB6eTO0BXHKvpFwZ+j4opiQ8nRd3kI
ODVYHQ==
        "]]}, 
      {GrayLevel[0], 
       Line3DBox[{1711, 1926, 1138, 1710, 1927, 2420, 1867, 1712, 2421, 1868, 
        1713, 2422, 1869, 1714, 2423, 1870, 1715, 2424, 1871, 1716, 2425, 
        2338, 2473, 1717, 2426, 1872, 1718, 2427, 1873, 1719, 2428, 1874, 
        1720, 2429, 1875, 1721, 2430, 1876, 1722, 2431, 1877, 1723, 2402, 
        2432, 1878, 1995}], 
       Line3DBox[{1725, 1928, 2339, 2525, 1724, 1929, 1153, 1726, 2433, 1879, 
        1727, 2434, 1880, 1728, 2435, 1881, 1729, 2436, 1882, 1730, 2437, 
        2340, 2474, 1731, 2341, 2475, 1732, 2438, 1883, 1733, 1996, 2140, 
        2568, 1884, 1734, 1998, 2141, 1885, 1735, 2403, 2439, 2142, 1886, 
        2320, 933, 2440, 2000, 704, 2152, 2570, 782, 2001, 706, 896}], 
       Line3DBox[{1737, 2342, 2476, 1736, 2343, 2477, 1738, 1165, 1739, 2441, 
        1887, 1740, 2442, 1888, 1741, 2443, 1889, 1742, 2444, 2344, 2478, 
        1743, 2002, 2143, 2345, 2532, 1744, 2003, 2004, 2346, 2533, 2321, 
        2322, 1997, 2005, 2577, 2229, 2230, 2153, 2203, 1999, 2006, 2231, 
        2232, 2154, 2204, 2404, 2445, 2008, 2233, 2267, 2234, 2007, 2268, 
        2269, 2582, 1930, 2010, 2235, 2270, 2236, 2009, 2415, 2583, 2271, 
        1931, 2012, 2237, 2272, 2238, 2011}], 
       Line3DBox[{1746, 2347, 2479, 1745, 2348, 2480, 1747, 2349, 2481, 1748, 
        1176, 1749, 2446, 1890, 1750, 2447, 1891, 1751, 2535, 333, 2534, 1752,
         322, 1366, 335, 232, 1633, 799, 337, 801, 233, 1634, 804, 339, 806, 
        234, 808, 341, 810, 1636, 235, 945, 343, 814, 1638, 236, 345, 1368, 
        237, 347}], 
       Line3DBox[{1754, 2350, 2482, 1753, 2351, 2483, 1755, 2352, 2484, 1756, 
        2353, 2485, 1757, 1185, 1758, 2539, 2023, 2024, 1759, 2526, 1932, 
        2013, 1933, 2540, 1760, 1934, 2014, 1935, 2275, 2584, 2416, 1761, 
        2273, 2276, 1936, 2015, 1937, 2578, 2323, 2239, 1762, 2174, 2277, 
        1938, 2016, 2486, 2381, 2240, 1763, 2274, 1939, 2017, 1940, 2241, 
        1764, 2382, 2536, 2018, 1941, 1765, 2537, 2019, 2144, 2020, 1766, 
        2538, 2021, 2145, 2022, 1767}], 
       Line3DBox[{1769, 2354, 2487, 1768, 2355, 2488, 1770, 2356, 2489, 1771, 
        2357, 2490, 1772, 2405, 2491, 2032, 1773, 1269, 2025, 1942, 1774, 
        2527, 1943, 2026, 1944, 2543, 1775, 583, 2027, 1945, 2544, 1776, 1946,
         2028, 2492, 2383, 1777, 1947, 2029, 2493, 2384, 1778, 2030, 2146, 
        2031, 1779, 2358, 2494, 1780, 2359, 2495, 1781, 2545, 2038, 2039, 
        1782}], Line3DBox[{1786, 2448, 1892, 1784, 2449, 1893, 1788, 2450, 
        1894, 1790, 2043, 2451, 1895, 2044, 2386, 2452, 2046, 1896, 2045, 
        2388, 2453, 2048, 2158, 1897, 2047, 2389, 2454, 2050, 1202, 2049, 
        1952, 2052, 2548, 1898, 2051, 1954, 2455, 1899, 1797, 2456, 1900, 
        1799, 2457, 1901, 1801, 2458, 1902, 1803, 2407, 2459, 2054, 1903, 
        2324, 2419, 2591, 2326, 2325, 2055, 2159, 2242, 1904, 2205}], 
       Line3DBox[{1805, 2278, 2279, 2040, 2546, 2392, 1804, 2053, 2505, 2406, 
        1802, 2504, 2365, 1800, 2503, 2364, 1798, 2502, 2363, 1796, 2391, 
        2501, 2037, 1953, 1795, 2390, 2500, 2036, 1951, 1794, 2547, 1950, 
        2035, 2175, 1536, 1793, 1949, 2034, 2542, 2387, 1792, 1948, 2033, 
        2541, 2385, 1791, 2042, 2499, 2041, 1789, 2498, 2362, 1787, 2497, 
        2361, 1783, 2496, 2360, 1785}], 
       Line3DBox[{1807, 2366, 2506, 1806, 2460, 1905, 1808, 2056, 2461, 1906, 
        2147, 2057, 2059, 1907, 2058, 2280, 2281, 2462, 2061, 2160, 1908, 
        2060, 2393, 2463, 2063, 1909, 2062, 2549, 1955, 2065, 2367, 2528, 
        2064, 1956, 1212, 1809, 2464, 1910, 1810, 2465, 1911, 1811, 2066, 
        2067, 1912, 1812, 2394, 2466, 2069, 1913, 2068, 2176, 2206, 2574, 
        2412, 2071, 2161, 2243, 1914, 2070, 2413, 2571, 2208, 2177, 2072, 
        2162, 2309, 1915, 2207}], Line3DBox[CompressedData["
1:eJwVzzlSAlEUBdBHleVAYqSADIoTLkMhNjEVEhaggWOAWAUrEXDahxm6CFIU
cSqHzENw6t7/6nX/7mL9cO8gERG7LM5EbM9F9FnQd+QjKT0zGzGt55MRDecl
5xHXesp8qD+T5YV9s4zdN/2VMTm+zW88U9AvZF7+mN3qZTkgrVfk0+Qd+sOU
++Sy3SK/5k3nFf2DO31NHvHOMau0uKJqf9639PQTOpyyTpsuNTtdNvWzyX9x
zgZ/5p/yi3t3bclLWZL/GL8ofA==
        "]], 
       Line3DBox[{1820, 2372, 2510, 1819, 2089, 2373, 2554, 2148, 2090, 2155, 
        2417, 2592, 2331, 2293, 2091, 2294, 1962, 2298, 2295, 2296, 2092, 
        2297, 2586, 1963, 2094, 1920, 2093, 2555, 1964, 1921, 1821, 2468, 
        2374, 2511, 1822, 2375, 2512, 1823, 2095, 2097, 2376, 2556, 2096, 
        2300, 1965, 2328, 1521, 2299, 2169, 2098, 2180, 2214, 1966, 2217, 
        2170, 2215, 2171, 2099, 2181, 2216, 1314, 2101, 2172, 2173, 2100, 
        2557, 1967, 2149, 1922, 2102, 2558, 1968, 1923, 1824}], 
       Line3DBox[{1826, 2377, 2513, 1825, 444, 1510, 540, 445, 1445, 446, 278,
         447, 1446, 279, 541, 1511, 449, 1827, 2469, 2378, 2514, 1828, 451, 
        1451, 452, 280, 1452, 453, 281, 1581, 668, 455, 669, 282, 457, 1453, 
        283, 459, 1454, 443, 1829, 2559, 461, 1830}], 
       Line3DBox[{1832, 2379, 2515, 1831, 2107, 2108, 2569, 1833, 2109, 2156, 
        2110, 2576, 2220, 2311, 2244, 1969, 2329, 1970, 2301, 1834, 2530, 
        1971, 2103, 1972, 1835, 2470, 1924, 1836, 2471, 2380, 2516, 1837, 
        1973, 1974, 2560, 1838, 2182, 1975, 2218, 1976, 2572, 2221, 2183, 
        2245, 2184, 2222, 1977, 2219, 1329, 2185, 1839, 2186, 1978, 2104, 
        1979, 1840, 1455, 2150, 2105, 1841, 2561, 2115, 2116, 1842, 2531, 
        1980, 2106, 1981, 2305, 2304, 1843}], Line3DBox[CompressedData["
1:eJwNzU0uw1EYhfGXP9FWjMxUUrWGalUlVKIiDBoLIOkEE12FEcoyzOpjrvXV
ljZm2A39DZ4855x7c2++0Tw4m4iIOlZmInLpiCUsZyIKel6upSJSvMOLnEYG
Pf3JnT/Oun9o68uzPOCOswW5y/96kU/0b+zqJf1WPudVTHpjz76PRC7bnrGh
v/AFT9k/+BL3eLW3+Y3nnF3Jn2jh3bbJP/44wppe1Y+xhYp+av9FXV/Xi9MR
23JPTuxDeYR5b1/zA/rO7njAj3yDL4wBHy0n+A==
        "]], Line3DBox[CompressedData["
1:eJwVzksug2EUBuCjoUWKSc2q0YWoe/trgihtXSYYEpXYiUtR67AJTcT9UizG
08GT97znfH/T4uFprTUQEXWqmYin4YjsSMSz3OSOe6bTESvut+ZHOtRoeZse
jRiUN3riTU/+sMGQ24FbxX5P/zPvyrK+b/5lXe/qy6T0vG/O5Jr9NW2W3Cbt
L81XrHLBOYtuBbdx30wwRoEpivYL7jv9/6QfM69v6z3zEXP6A1W7b76Y1T/k
Z3/nTSLfeaPk9iJzfvtVntBkxj5jVzdv0eAflQQo1A==
        "]]}, 
      {GrayLevel[0], 
       Line3DBox[{987, 1250, 1139, 2420, 988, 1252, 1153, 1016, 2477, 1164, 
        1027, 2480, 1174, 1037, 2483, 1182, 1045, 2488, 1190, 1057, 2497, 
        1200, 2449, 1068, 1209, 2460, 1078, 2508, 1216, 1085, 1431, 1508, 
        2554, 1223, 1093, 1443, 1510, 1229, 1102, 1460, 2569, 1513, 1234, 
        1111, 920, 2332, 977, 869, 1121, 2580, 765, 1488, 767, 926}], 
       Line3DBox[{989, 1140, 2421, 990, 1154, 2433, 1017, 1165, 1028, 2481, 
        1175, 1038, 2484, 1183, 1046, 2489, 1191, 1058, 2498, 1201, 2450, 
        1069, 1406, 1507, 1210, 2461, 1079, 1418, 1419, 1217, 2589, 1086, 
        1678, 1705, 1432, 1704, 2592, 1648, 1649, 1094, 1579, 1444, 1445, 
        1653, 1654, 1103, 1584, 1461, 2576, 1462, 1656, 1699, 1657, 1112, 
        1611, 1658, 2587, 1331, 1471, 1662, 1664, 1663, 1122, 1614, 2520, 
        1665, 1336, 1489, 1615, 1669, 1616, 1679}], 
       Line3DBox[{991, 1141, 2422, 992, 1155, 2434, 1018, 1166, 2441, 1029, 
        1176, 1039, 2485, 1184, 1047, 2490, 1192, 1059, 2499, 375, 2451, 1070,
         390, 2059, 392, 262, 2327, 953, 410, 831, 270, 2298, 845, 430, 846, 
        278, 854, 448, 960, 2329, 284, 862, 468, 964, 2330, 292, 487, 2122, 
        299, 511}], 
       Line3DBox[{993, 1142, 2423, 994, 1156, 2435, 1019, 1167, 2442, 1030, 
        1177, 2446, 1040, 1185, 1048, 2491, 1382, 1383, 1385, 2541, 1277, 
        1395, 1278, 2452, 1397, 1286, 1407, 1287, 1694, 2462, 1643, 1409, 
        1605, 1695, 1297, 1420, 1298, 2585, 1645, 1644, 1422, 1549, 1696, 
        1308, 1433, 2586, 1309, 1650, 1435, 1607, 1319, 1446, 1320, 1655, 
        1449, 1325, 2530, 1463, 1326, 1113, 2517, 1472, 1514, 1473, 1123, 
        2521, 1490, 1515, 1491, 1131}], 
       Line3DBox[{995, 1143, 2424, 996, 1157, 2436, 1020, 1168, 2443, 1031, 
        1178, 2447, 1041, 1373, 2539, 1374, 1376, 1269, 1384, 1270, 1387, 
        2542, 1279, 1396, 1280, 2453, 1399, 585, 1408, 1288, 2463, 1411, 1299,
         1421, 2550, 1300, 1424, 1310, 1434, 2555, 1311, 1095, 1447, 1511, 
        1448, 1104, 1235, 2470, 1114, 1240, 2472, 1124, 2522, 1492, 1493, 
        1132}], Line3DBox[{997, 1144, 2425, 999, 1158, 2437, 1021, 1169, 2444,
         1032, 1362, 2535, 1364, 1365, 1262, 2526, 1375, 1264, 1378, 1271, 
        2527, 1386, 1273, 1389, 1536, 1537, 1398, 1282, 2454, 1401, 1289, 
        1410, 2549, 1291, 1413, 1301, 1423, 2551, 1303, 1087, 1224, 2468, 
        1096, 1230, 2469, 1105, 1236, 2471, 1115, 1474, 2562, 1476, 1680, 
        1706, 2593, 1707, 1494, 1671, 1670, 1496}], 
       Line3DBox[{1001, 1146, 2426, 1002, 2475, 1160, 1023, 1356, 2532, 1171, 
        1034, 1357, 1366, 1180, 1043, 1639, 1640, 2584, 1379, 1519, 1187, 
        1050, 1274, 2544, 1390, 1194, 1061, 2500, 1283, 1402, 1203, 2548, 
        1072, 1292, 1212, 1081, 2509, 1219, 1089, 2512, 1226, 1098, 1450, 
        1451, 1232, 1107, 1327, 2560, 1464, 1238, 1117, 1557, 1612, 2564, 
        1558, 1478, 1531, 1588, 1242, 1126, 1564, 2581, 1617, 1565, 1497, 
        1535, 1701, 1246, 1134}], Line3DBox[CompressedData["
1:eJwVzz1LQmEchvF/ZEJviw0NtbQIQYP2MuiSOUVRg/gBqkVqyA/Q1hAEjYEI
BhFtNjbWZjT0DVycwsEWKTDQoJ/DxXXf93nOwzkrJ9XS+UREHKA3GXGRwHTE
l3wtX8nBh1MRtWTEp36rz+JI7/Ixb6OAG+ygb0/NRNTlU5xhyfbi/SFX3dfk
NN5sCf1ZrslZfsW9nOcWimg4c4eR/UPfx657V21P+MaD/sNlzxbkNWT0Od+S
lQfyOv/yHi9iA5v6vDPv4/uxZfvjinuW7Zf6I3K2Njrjf8A/qv8pMw==
        "]], 
       Line3DBox[{1005, 1148, 2428, 1006, 1346, 1162, 2568, 1025, 1347, 1517, 
        1596, 2577, 1597, 1675, 1598, 1256, 1634, 1602, 1603, 1677, 1604, 
        2486, 1266, 1380, 1188, 1052, 2493, 1276, 1196, 1063, 2502, 1205, 
        2456, 1074, 1214, 2465, 1083, 1425, 1426, 1221, 2552, 1091, 1651, 
        1312, 1652, 1521, 1697, 1522, 1606, 1553, 1577, 1322, 1581, 1525, 
        1582, 1526, 1609, 1556, 1583, 1329, 1465, 1529, 1530, 1118, 2518, 
        1333, 1480, 1243, 1128, 2523, 1338, 1248, 1136}], 
       Line3DBox[{1007, 1149, 2429, 1008, 313, 2141, 530, 314, 2006, 326, 234,
         342, 2017, 242, 536, 2146, 361, 1064, 2503, 1206, 2457, 1075, 399, 
        2067, 400, 266, 2083, 419, 274, 2217, 661, 439, 662, 282, 458, 2104, 
        289, 544, 2151, 476, 1129, 2524, 520, 1137}], 
       Line3DBox[{1009, 1150, 2430, 1010, 1348, 1349, 2439, 1504, 1350, 1518, 
        1351, 2445, 1570, 1359, 1626, 1257, 1636, 1258, 1635, 1367, 2536, 
        1267, 1381, 1268, 1053, 2494, 1197, 1065, 2504, 1207, 2458, 1076, 
        1293, 1294, 2466, 1415, 1543, 1304, 1573, 1305, 2575, 1575, 1544, 
        1427, 1550, 1576, 1313, 1578, 1314, 1551, 1439, 1554, 1323, 1453, 
        1324, 1512, 1455, 1466, 1456, 1119, 2519, 1481, 1482, 1484, 2565, 
        1339, 1499, 1340, 1702, 1672, 1500}], Line3DBox[CompressedData["
1:eJwVzb9KgmEUgPFj/gEdtKmhwAijwQtQKGquBqEiyKAlqFEvoMQhidpzCoR0
9waSnCPoEoIGhcit1qCfw8PzvOd7v/OunTcPG4mIqOEnGdFOIRvxq3fTEQ+Z
iD2+M+vqfX3EE/fqvJSLmOoTfeDbGX87X/KML/jTvI4vO065aD7WQy7jVV+Z
X+NRt7iAWyxiwY68d+51VpewrDd4hQf+yenu/P78O/fwZ77OEzxhiD6OvfnM
CTtH/IIK3lBFx44bvOuMO0VdxbbzJu/wFq/iQ/8DV/0mIw==
        "]], Line3DBox[CompressedData["
1:eJwVzr1KQmEYwPEn9Aiam0NlgwnZBThEo80lhNgHKAVdgFZrBY3ZHBF9QFtz
NncJXUIItkUNBQUt2c/hx/887+N5j+XdbqMzERFNvlMRtSRimZNsxI95xfM7
65mIXM7v9IINNlmzm3Le9tzikm122LL7SEcMtcWbO9tacrann+Z9PeDLc6JX
3rvhmpJ7bzVFmlP7jCZM2s2PS55zu67+uqcz/o/mCnf8OVvQVd990JG5r49U
eTU/6ZH3DjlmmjoF35nRZ/tZXaTIEnM0KPNif6b39BiY/wHIMCi6
        "]], 
       Line3DBox[{1130, 1244, 2567, 1487, 1120, 1239, 1709, 2594, 1708, 1110, 
        1233, 2515, 1101, 1228, 2513, 1092, 1222, 2510, 1084, 1215, 2507, 
        1077, 1208, 2506, 1067, 2448, 1199, 2496, 1056, 1189, 2487, 1044, 
        1181, 2482, 1036, 1173, 2479, 1026, 1163, 2476, 1015, 1152, 2525, 
        1251, 986, 1138, 1249, 1343}], 
       Line3DBox[{1133, 1245, 1593, 1534, 1495, 1682, 1683, 2590, 1681, 1125, 
        1241, 1477, 2563, 1475, 1116, 1237, 2516, 1106, 1231, 2514, 1097, 
        1225, 2511, 1088, 1218, 2529, 1302, 1080, 1211, 2528, 1412, 1290, 
        1071, 1202, 1400, 2547, 1281, 1060, 1193, 1520, 1388, 2543, 1272, 
        1049, 1186, 1377, 2540, 1263, 1042, 1179, 2534, 1363, 1033, 1170, 
        2478, 1022, 1159, 2474, 1000, 1145, 2473, 998}]}, {}, {}}},
    VertexNormals->CompressedData["
1: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
CN7NY/s0/rv/qTqHJj+74tK0VcrCDfddjZzDZ3onRj1f8TiPrqm6VMzRSGP4
mvVh7pgnTQ2kOOVh/7FlicxxxYFeGZqFbPhYy+StPvXkcyZK4+SOOLZt6KSt
U7IqWXN913n3cmvJaWnhYiObcOabqm24sIHPOjs+choTUENDol09ZJf8mQet
iLnvJ2LalztKjp+U0FCzX0qJJx+xRReHPXVMkrBdQVYZLXtE9O2Ru/ZEdpXF
Pgl7KNpSw9gq9YqMUwLS+T/2ZUFKh5/byj9vhm5KM+7WLGMP+z+J47VWU493
vmGep0PZjCHevdpH1zKBmeHwoV5V5GC57sy1ZQGs1Kys8IJZHZupEqStaVtB
tvmzygsET5j7vKjXzlXyfdbPURe+2pTRrUuPpoR0u892hlpODDWqZ3didWvV
3Ero1AqncUkdXVjS41GRxeH1bFu3hpQJ8s+dotW/BME7i1jNKx3te8kp8vtu
sl+GYT2NEAxTnt+Uz/B1QaT873VzHdW+V0198TGHWS/Scrgyu4Kdj0hT1VGq
peUqsafVj2WyW6/WtzPpyWctEftlLktr6H5VXt8293Q2dMprlempQiY58TxZ
ZiehwY2fYk7tSGHR41sGr5CKWVje+UV5ISJyzBrTp6YggR161jA72FPKkmPn
GiV8EZA5t685xO1rnnP7mjy3R2XlNmnMuZNXxItyKWtTutDrwwIBaR3aK8zs
m8zSlDp8q3eqYd5zhq7s6Mmnvq4Hjlm+T2AHrwkCK8/KWFu8o+Xx9TwKje2q
suZQNVMaWHW1/l0Sc5g9Lu5ou1rSKb2v+02zkp2kXv0Cu+SxO69/Djx3S0aT
N/YozSgvZfiqvym7LCy+hj5eaam7frOI+f3w3uXlUc0+6SRvHRYiJZuBTmd6
OuazvVPHuGv9Podntp5o6jUJKS5XNG/OzmFdVnV84KosYp3qlL2b9ospcNmK
87vUstjciSMWz7wrZutK+6+oWSj6e25R4z/7mojXOr3ednnPNplcNippFbAm
B4X5h2skZDd58pkkuzfM8mdGuy7BAhbW9GCXpq2U7nXMT8hXFrL1lx825JUm
sJKwi+snXZeSjJ7OHu7OZzfmu2muHpXDbqV/Z2m3pXS+cV63OcnVzHV5UXLF
0GJmuW9Qh46HpXS839Xuj+9XMHzda344ZsoE+f5ozjSryDclrFvhLwfVjGrm
GFXqcLHt9/kH+fvvLSpk34S21zfp8dnbd9M0uggl1Mzta75z+xpNbl9TvTTU
VfE/xvp1rHGcop/NOpU9Gn0rqoHefToqfvJUzAYrGfUZ0CmeHVrRe62MxNRp
8Er9e3oi1nN4i+mUlEyms2PPYOMEMdlsD143rreAbbhEphpHCpjm+kUbnplJ
KOjYtrKnXtXsmpG9/F9TwnSCG5r0taXUL9pvz5qWMoavJv9NfifUryErbl/z
g/73vuZOp+cbNILS6Ow97fOmKnlUYHFa4Pu1nm7Mvnzv0KM8WhSxOyNyq5DU
1i+boeMtJme79p7nnKUsIP6ZZbf8OFa81qv3/MlCWu3pvK31o5i1nrWhgc5v
mfW5pu3KU0S0vHpNxWIHIQsw2NSvSZTLxl+P3Wf4QkwFIQfvX5zIY1EnY7+N
8y1gG9qf3v41UkoW3L7jHbfvWMntO5z6OESJv5fRopGWzlYxfFqy8bmFU6mI
1Bwvxdn8LKf0HPPk0K5i+s9vybmzmvL1aPWu1KcHysl3kmXHF0ZS0soZdbJ+
cyVpr0p5aqJdQvGl0Y5V92UU8WXenPaDSqgqUNfT90IRdWyXmJN4upa+PH2y
4U1KIakpHnu5prGG+TW52lLHGBYfpBlTd5RPa/bo9B8zUcrGBmfY20W9YU/i
zJYNVxTSHhXn8XXDRax6oenmG/bZ7Ie7ic2UK2IK5vYPf79y+wg93vGn7Wfy
qea5RcFTvpD0VglX13yuIvteozauf86jfd9n2DbzxbTj65vvJ46VUU3EQ6O8
W9U094x3hJ2WlN65TX8mEZTQndahjWLdKur8a8Pi+rE11HGQ76it84rpQJ/Z
O4Pbyslv3n+29+pqyMGn6farzCLCfTyGu6/jfh7/+cypsZ1rmNKMHx+XUiqL
/zX9wDZdAZ2dbTlldYiIvTpqv8Tp5XtmI5s1dbCxmDT+2Ue84PYRep/1r1wM
EP79autTlWyjVEpxAbe1V1wS0LPObwe+7CGmrnFxYyu+F5NsrXXLiaV8Wman
uXKPloSu6e351l9WTPdcYxQKX9ayOUUFyX43I9jVdfEHXRyrKJW7Pw7i7pdP
uPvk6K5Gd/r2FrEE8zH9iqzS2f6+MZmHZkj+n/3CSG6/MCNaf8nC4WK6c66r
zj5fAQ2aqXAnYVwxPWp7oO2bKPz71UHzalbTkRLq4fj+ctts+X3aT6Wtp52I
TgZ+HXEzuowqz7VVGi+vY89D1NaGvwtjyVUzd3+yrqBK+06xhV1lbGhwkuPo
G4ls2kH1AbsV+LSqW0vwx/Py+4r+wcLLN6vo1fvXcxYnV/w/54DYc+t/0pgk
6tlNQj/Clj90kK/zjx0psImqLabbakPuZnYT0f6J957pCfj00WeqY8qHChLc
exUxn9UxdVq8QFW+zieDBvP7r8romP+VNJF8v6zOv/+4tSSexRkaxJ5X5tNk
z8z2/uNqSNzT9OXPI5W0okNLOw+Nkv/nvIwibt1+zOnjoqgeEtpYdbJnVnA1
3W93OfLLrAoa9dLJ/7haPRvyase0VfJ1eH+td72VjUsp1luvNkBaw+zdZ9R5
XX7N1rWoqHrK9xcvaPnr3Asy2lJwpEdYTDEtGq2kYs0rIaMpqybNGSMjwcle
iW/elZOeYopJhfzn8O+5Ej+5dbWzf8jxpEwBJS9+eOKTQSmp7xtq9ft5te3B
MxUd99czr8+PFH69D2LT1jW9eFRZ/Pf3vIL7vcfv+3Vufdvvn/UtX3WZwhTv
eOq8Qz/0dLdwCjIYsH2QVyN9tl/esMZDwtZblut2+slj7weuU94p3x84HZ+p
/9yrnrXbcnzO2phA5jaqPtWyuojUuPXnKm79qc+tP/su8lx3T36f7/1rTrP7
iwJW3DDK881SCQ1JrrwblC5lc8VHnw+8VsXmH766SMOshD4Zj4k26FbDOo2u
WmMcwmP9Vn7okmiYSyWaWZ4nR3my2Uv4qY+vprHyZxYnxlg20luLk0vSO/ix
4nvXQubuKmTflehEYkM9jd3YfdKiY+9Z9c2uU9Y2p7LBRboeNp4NpDHHTDW3
SxYzj3rg9jq0gFUq7LmzTrWeDLn54Yvc/LALNz886eGfed3vV/7M62Zx87p9
uXm+ydx8H3FzfebSZRuHWAewXvEv4wfHJbM+2WXPv19opCWDBhmenM2o/ejK
YfP6ltL4t+rKsuY6Wj6Xt+ij+Rsannf7zPy+AvLpc0W47bOUFCr/zOWWcXO5
z7i53IPcvJQqNz8VxM1NKdQdSKialU0bmwUh+pa1dKNo6Knzj8vp8boXWxTv
5LL1nZU1WyPL2Cuh4Mf75bVUz32+N3Kf7wO4z/duwuXWnYzTWW3Kc9/Q71ls
xMquoT9MGqiWm2scwc05HuLmGwtVC4NlLtnU2X1z1vrxfEogJ0O/VikZ5Ju5
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
LHl8+e9dDzelvS/i3jPzYzelQbMTWU/lieMK0xto/qLJ3V4Mzqe2xBg+T/65
woQ3UpsL6uiDXvOrQatSyC06scHrdDz1jLBmGw0byYbr7Mdy3X07rrfvZjEg
PGRMBe3trTzk6b0Sytg9fvJ4ixrSe26650RXHqV8sWkd5yMkk7TzK16f5dH3
VMG7wKllpND7dotnsIxG5ddnnjpVSGe/LTm74mg5jU/V2zc7r4YG6ISe/VZR
TIXZ5sVtAeV0d2v2tdg+NZTQPmC62eUyuh7gdDFHImLP2+meaaedxfaanlle
/FO+nsxpuD13XTSr6TjwxTipPzv8enLXc/LPqQvt5z8cdqSAOmnue5Z3LJMc
ndbsDxsp/7k9v+04+0sQnU9fGe+wwZtePU60HiprpLtvT3sXNfPo3vq2dINt
FWR3vHvx6c5iml2h5NAgX2+b1pY2n1iQT2MmJs2QTpD97eSLuU5+DtfJ33Zu
/w/HrUJaO6/yZsr0KnrpHTP2p4aAvov45mv3lJH0cqhhvpmYHlolTT1gxqc3
s8NHn3xYSXcumCQ+iBdRksI8txvpPNr3pPPYJudsUtowwKJdbTmtYA7DFxjX
kj/nuk9zzruHgvv/+O49e9Vv690Wscz0e8sefMxgjwLn7ZrvLaZH2ZVzP20R
sWSFEap2UzPY+y8HJymKxHSzk8u0Te0y6WBDmXBZEaNrNqrHZpQ20PYIgw8e
lXyatL9+yCnzIsrrFO/7oIuE9D9Per9uZQlZjzq4yqhjOmld2RoVFlVHFisz
dp7XFtOKLj2ztgmqaHXA9BtRTP55d+HHu0tHRTQ4L27E9v4ltMypXMdMX0i7
DCVRPxYL6KPZ4uF1I8S02rLnk65rS2hd7dAew00FlPsm29SNL6KgiW3KHUaU
ksYI/tzRWu7U0/3904aLdyni7a0a0x/yzxGbItVNCWVM3a6A+R8WsUFG4xbx
DAU0k/Ptjzjv7sQ59z55M7TG2lazCVmJ9m4dpGylYreS2JOlZGzdmKjWScaC
WqvekV8SG9w0mvp+4lGWffrGnTZCVu393U2jIpUlRg3dr1IvoZGrBh9r11JN
0bb6y5ruZpG2X2xfpU81ZGulH/LTWEJqWj8v6OXI/39d88t9wnj0rf50z/rV
Qppl/DO1vzSHjk1Zrvurk4QObuDlmq8U0bT6lg9XhgnpyfYdB/u7llBorIxd
NxbR1UPnv2Q+FNBz9erkh0PKaOGGtvADW3hM0r4m2cJczAbZrVLa5lNBq/Zs
bksN4THLTc16Un0hq1zx66f5UR7df+Xp8S2ex17zOngmXpCygg91atci82lL
P8UALzMBWx7QM3buIAkbRS+nlx0oIF5GkI8qCVn3qbvPCVQkrLPFVlMb+b5z
wbdtGTtmydhTR/+4rhUJLHX+u10bk3jkePmXRrR8fcYvWvjezSCR7Yvee/F+
aw2dd41V9FrMYzOHf33VnxfPVHLPajl4yMjB2rBJP0tML5cmfs5XzSPHE2bK
i1YJKcFASeeOdg3Ne75pSUZcCQ3XmsdrGlZJnReManigLaOyIby4pssl1HPy
uI0OcaVUMWBgtNc9KRkszGt66pVH5tvrO2h+4FFA5yI3g2USGqp6LqLDQD45
ft5kEhRdTOmiBwsOr5bQjPY7aNBJHvmLnz+es6uUzvUZsP5rkIBm/1izZeam
ajKINUlTmSigI7R7ZWu5gC2NPtM88YKIlS9Nml2QVkL9Y9eeuFApYFd72Kqe
GS1f/6Q+rVQZm0ev56oJdl0VMXwdX2KlNP50HtVmBrn3/ihiGZ/bXzCzFTEz
l9LpKzvm0nN+0M0qxmepG3LvX14hZQ7pGpN79s6l02+VPQu8BczOpGzq+zAJ
s3Iqky0+lUOBTxqbM2IF7Hus5i/LKxI2foz6kh2NOZTb0lA9drqMHazsriQ1
iGfaD7tk2PHl6xNuHdky7c+68gy3nuyWcHb3oBEl7LafdxfX9Ahmv6WoumBp
PZ3S6RGqWFdDZ9Id+mgk5lGjeXTmUkkVpYeGPDTREpN/5XOl7bMqqfe9RULe
GR5pPWoWPB7LZ76DioY8O1PJKoyH5048JiKS9vbplyZiHWVDRF8ui5i1wfuC
tAu59NPIw+JSmpDZhhrkeTwSs/NmWqdf1eSQd0Sk1d6FItZ76wRjrTFidvqp
TXFYbg7tk5kE8r8K2KOIlhlmb8Ts+qgO63Lu5dO81QsDhu4WsWre5hKHQhH7
1KtzwHxBLpWdTd5ypTyF9fJoP6h/8wN218rWpeBsI82ephx9fUstrZy409Nw
Ux4tebFwxDFJKd374UGXM2qp64rEMVqL86iPxdRta8aX0OWAJLW3RTJ68kxN
dbVmGS0IsOqlIyigbf/MaeB5ct7YjFeLNGrJcf4cr9b0EpL4bjx5ZEIhdfmn
T87j+uSBHVIu6Mmvo46Z074s6JlND11vDM0fUUdnNM+dL97PY1ctO+dtcSlm
hyQxmy5XSKhP06ab0fsk7LpVQcfbnfis+Nvl6Xz5PqXF+qydovzn+DA3YnLO
WyFr79KvXVZxDl09qFOVUyRmU/d7mTS7CdmOkWapoTE5tHlx7CvN/fL93cfS
9BctQrbv83G3MVsKyX3TwG9VrWK258ERLWUt+Z+jOsc6ST2PnLfGSY7xq9kJ
H+3Wi5E8tv1GwbzrD4R0mPOMx9EF4TxjILePcuf2VTe4/VT4y309rT5L2X2+
U6WdVTTTbFz/7nOqgOYxXq6YXlNmlxW3FaLukd2V6G2bkuSf1zsvVq2xlK+D
M0fvWO6ZS81HhK/a+xeSn1Gr8HpwHb0Jjv3SyzKXGpVyXtpfLCDnL/ua30+q
o/Yvm6+6mRZS4xIdo7cb8+lXH/25xvI/p2BY9bOPMQXk3aFoaWBIHiUIhJPf
tqulos6SqaNPFZOxTcKmZV2KqSfX/V7Pdb/bcd3vIcuPNO+Lk1HrprTC5o1F
dMHOZM4vw1Ka4BFy1WFMCTNbvdA+pXcmU1rmqzdE/u87X/oqh7dJysb76oc0
eVax6ZEaN40qS8ntyBbhTZmY0fD/ghYuFzDVus7379kW0hFHPYWrimJ2yq6u
y5kKHtt6p3Dx57AKur15W7naO/k6YvHrAjezaurl0HXo0zciGjrhT1clV/9P
Z0WB66tU72pqeTVZRNkeEUU9hQKKvv1ZdctL+X3ytrPu4QUJbGRwWEWSk5RV
Wl6bN723kNSDWgePHZ9DmqnlvltXyyjALufn2U7V1EOs+mjhV/l1Oa9zJC+/
lg7mdeg360kpVY1rU3DOF7Ho7Sp9xx3IZB5lt0OtB4kp1aFol0MPGbs4bPAY
n/5J7KRNUe1l+efmC439o77W8dmNr1P36Y6VsMyJtbGJzwvJxUU7bc54GStM
fH17kVkCcx4Y0WdDBY9yu+1rvviihl5HOVxcFlJCpVunrJw/u5zEMZrGNkoi
ltU8bW91jIjdbv3PNKYtn/KmuyScV5OxI8mr+xjYM1amdMd0tQaf+szQOdLJ
U/57fe3jUw/TPCqUzQts+lxCx/vxV+m5ye9/Vk+SF1zMJcvBG7X7dSkkq1Ve
6UGzoxnvssl/nndrmcjYc/a7+CpaUb8nw4ZS2X8btsXs2yVi9/jjo94MlpD9
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
PHefqm6gW6pbb2zbw6ODq4sHD1ldSOqdUwv2HZCSk9hI5VQVn4UkDPgSMEXI
Rq43mhzcv5o6JIdfM53oRSGXkhu7Rp2hvRrfYlR+NNIqnoHZx/Q3VOfhXp+v
8oRs7S37nN7cSC0BywI7++RQXq+g/U5P/als/fHKpxENtHhov30qYzPYhlBb
3UF3GMsWz7NN6i1fn0gvtuwS51HJ9K1vmt/nUZNN86KQhDqy5+ZJXnPzJLu4
eZJZQ86v/f4ilnlVqSs8NpKy8oMfNi11FFLVfqdJXttimNuktR8HRslYvon7
wrjlPAq4bPr4+7eXzLv32PmBxwSsy/BLp4ZOrqEtyy4O+jAkmHmVVa7pV17I
7j+ev1wvt5423OH6chf/zKsUcvMqw7lez1Su3/Oe6/b0V/KmVskTqtkaumP+
skTiVcXofnnSSDlXtu80Koikzq9ac/K8S8iuR3j05DH1FHL1z89xTsafn+tO
7ucZw3XknnLzKpncvMrc+WEPszYl0dE1rj3cDYQUtODhVMdVUpqy6ext5Ynp
JBK2vJhqJaWb6nOf6fkJaAg3V7OOm6uZws3VSDi3f5pz/B6c3/dR/THj7AoX
FmejPDlW5MN258460va5kW7o57DN8vvzqGWJT+usxDTz+4TZ70+I6PFY93ve
R5Npk+2Y8mYv+TpPQXmZoFRGrtxcjT43V3OLm6tp5Zz8fs7NV3JePks67tWo
wBB2dIvC7p19E9hgnnmxkncjPe3lu3fywivUsOnNdWNNdxrR2//uPvn9sJTr
eRVwfa9CruvVyH1fyH0/nft+5y1//nmpyp8/D3/OJzXjnCUqReRcqd86piiV
EgbFnZu7rJ6WaxQZ296Wf670e61oG5NMI/JZd63Sejpef+LC6h7ydc6wm+2O
v5KwFzpH5tX9Pp/9TtvbqpkVzNhi3JnBs8Ssv+UEk6RkHpVy97V67j53i7u/
lXhYxh49IWC7BfOX9PNOZiFVr6QNZVIS+9ck86MEtG70VK9H9jn0+cnsiNDH
EvLo87jTGm0BHRp/eHXACCH52A7ZZCLfH7z3zFlStp5PHeasLzF359OnaoOL
DnZ8sh707Zl8EcdMWl4N2PginqXGjV0rypCRWu8tfnlUzXpOeKk6TI+x+M/3
Hl9aUksFHR8kr14ppSRHne8/b+bRiZuxKac38cnA2f6ncUIRW2Pfzn2NdgQr
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
M0HXQ/LP+g1dDHQy0MdAhwJdCvQo0H1ABwL9B7g+9AbQGfh3PQbXP+mfdRcc
veif9RU8+/t/1lGYA4QDhwvH80z4bXhuOO4R4jC7sHIpK0qIDYu1SWOSbh0O
1S8Q0NYJMjX9nwL25GpR37ou79m7K3fdRtVICH0Q9ELQCUGPA30OdDnQv0AP
Ax2MLYd7Bu7yFVCCiihu7nAxnZmnq1Yxrpi8r+rd/t0LMFrEr/3dD9jTZdz/
dAPg9uH44ffh5+Hp4ejh3uHg4d/h1eHX4dY3jNVzWRQiYPf7rKanJ98w4TiN
pO7HpX87Heh2oNfhN8PUdrGAT5YGm1+0dBPRzsOtT+qa5J+DnHuHg4d/R5cE
nRL0SdD7QP8D3Q/4fHh9OH34eXh6OPru6sNmlN6XUVXAtZWztEvoROyo7+MH
lfztBlRz3YDPXDcA3h7+Hu4erh7OHr4eDh8uHx4f3h7+Hu4ePnAw5wXtOScI
vwfPB8dX8Kb98Myy98wlpaz/0ZICNm3/El/Z4HqCr4a3hrOGW4Zjhl+GW4Zj
hl+G74X3hfOF74X3hfOFg/3rYjkPCxcKJwofChcKJwofCp8JrwmnCfcOBw//
vk49Tmin+4LpT6x8Y70olF2eOt60pLzxrxuHI4cfP2SypV2Fei6Jhrn6ul4v
pc/DVHT7B9T+9cnwynDK8Lrwu3C76AKgE4A+AFw9nD18PVw6nDp8Ohw4XDg8
OBx42D8eHC4aTho+GvdPOGn4aLj3MZwfh3+HG4cjhx9HxwFdB/Qc4LXRA0AH
oLvTww9GtWKyOXDhvxPbqmni7lenFmyo/Ot74X3hfPG+AQ4V/hSdCHQj0Ivo
xHnqAs5TJ3KeOmL6f+r7e0hp/ytTKhWVUq3I9FPW3Oq/Xhp+Gm4arhjOGL54
Wl3UfnF7PptU4Zd2dLiErTKv2Xr0fAm5H5O5f+bx2MceT/V8i6Vs5GBDjd8e
Ft0KdCzQr0C3Ah0L9CuOcR55BueR0X9A9wEdCPQf4Pbh+OH3F848803oL6Eh
X80lY2OqyO7Fo4iP2hV/fTu8O5z7OM63w7vDucONw5HDj8NXw1vDWcNXw1vD
WZ/YEHd+wBEBW3nFbt7SajEz6mz+X4ZWIcEDwwfDBaMngr4IuiLoeqDzgb4H
uh7ofKDvgU4BugXoFaBTgG4BegXw/PD9cP1+3FzWXW4uC64fTh5uHl7+r6/+
55xNOGe4Z3hnOGe4Z3hndEnQKUGfBN4e/h7uHj1E9BHRRYR3gn+Ce4J3gn+C
e4L/gQeCA4L/gQeCA9I99fBBiE0cK1zVGnw6soZ9/WLteTuST/AA8AFwAXB9
cH7wffBs8G1wbfBs8G1wbaXzD/XsUpzCBkX13KPWTshMPqYeObFZSvBI8Elw
Seh7oveJziecDNwMvAz6mOhlopMJfwKPAoeC9+J4T4734/AP8BBwEHCecJ/w
nvCN8I5wjvB78HxwfPBp8GpwavBX8FhwWPA/8EBwQFsOaDr+2JhHtwdJ8tdv
qSWLGE/+OWnpXz8DTwNHM1D9ktoUz1x6tLvSaqllHd07fn7MMv/Cv34DngOO
I3L+45nu+YVMd8kpz9a+5ez7r1yHbTtlBA8MHwwXDA8MHwwXDAcLFwsPC/8J
DwoHCt8I7wjnCL8HzwfHB58GrwanBp8GrwanBqcNtw2vDacNtw2vDbcMxwy/
DK8Lvwu3C6cKtwqvCocJlwmP+SDpg+pvJ5Pp4KecOamOIkf42f72MnAycDPw
MnAycDPwMvD58Ppw+nD4cPnw+HX/PLeH30fnHd139N7RVXf9Z98Hrw6/DreO
/jh65OiQw3XDecN3Y10U+k+vG84Z7hneGesi9LDRwYb7hQOG/4UHgw+DC4MH
gw+DC4NngG+AP0KXAZ0G9BnQZUCnAX0G9PHRy0cnH70D9A/QPUCnHt169Orh
/OH+4f3Rc0ffHV13eHj4eLh4dM/RQUf/HD4cXhxOHG4TjhN+E24TjhN+E31k
9JLRSYZXhF+EW0R3GB1i9Ifh8eDz4PLgu+C94LzQv0APAx0MnK+A8xZwzgLm
qzBvhTkrnAeA8wFwLgD6+Ojlo5OPvgB6A+gMwA/DE8MRo/eN/je633DFcMbw
xehoo6uNnjZ8LLwsnCzmjDF3jHljdJz/dp25njN8I7wjnCO6yegoo58MRwdX
B0+HPgt6Lei0oM+CXgs6LZh7wxwc5t8w34Z5N8y54TwGnM+AcxnQuUD3Ar0L
OHa4dnh29OLRj0c3Hr4d3h3OHXPhmBPHfDjmvDH3jXlvdMDRBUcPHC4XThc+
Fx1tdLXR00anA90O9Drgn+Gh4aDhmeGb4ZrhG+Ed4RzRx0EvB50cm8R5p8NF
MiYTKvWpf/Ca6bc/Z3tSWk3o46CXg06OIeeau3K9nBOca0ZPAX0FdBXg5OHm
4eXh3uHg4d/h3uHg4d+vaq75H2fLF934H3cbOcZN6be3hbOFu4W3hbOFu4W3
HcadG9XGnRvVOffPuVHo+KDrg54Pujno6KCfg74MejPozKBTg24NejXHhZW6
94Nl5LlV3BIwtYzKJ/EX254q/NvdQIcD/Q30JtCfQHfib2eB6y6gt4C+AHoD
6AzAdcN5w3fDdcN5w3fDG8Mfwx3DwcLFwsOi64TOE/pOwZxHPsB55MucR8Z5
SDgfCecioYuEThL6SOjyoNODPg+6Lei4oN8Czw/fD9cPzw/fD9cPNwtHCz8L
HwsvCycL7wr/CvcKlwunC58LBwsXCw8LBwsXCw8LfwuPC4eL84RwvhDOFcL5
SThPCecowavDr8OtowuATgD6AOgpoK+ArgLOJ8B5BTinAOdn4DwNnKOB8ydw
HgXOoYDjheuF54XjheuF54UHhg+GC4bjheuF5/13/QaXCg8MHwwXDAcLFwsP
C78KzwrHCvcLBwz/C/cLBwz/C8cL1wtHBscL1wvPC38LjwuHC38LjwuHC58M
rwynDG8Mfwx3DG8Mfwx3DD8MTwxHDD8MTwxHDI8KnwqXCscL1wvPC/8JDwoH
ClcJZwlfCV8KbwpnChcKJwofCr8KzwrHCo8KnwqXCt8L7wvnC98L7wvnC2cL
dwtvC2cLdwtvCzcLRws/u4V7rtWTe671iXuuBT8MTwxHDD8MTwxHDMcL1wvP
C48KnwqXCo8KnwqXCkcNVw1PDUcNVw1PvZJz1Lc4Vx3DOVk4arhqeGo4Z7hn
eGc4Z7hneGf4XnhfOF84XrheeF44XrheeF54WvhauFq4UzhU+FO4UDhR+FCc
O4JzSHD+CJwe3B68Hs4jwfkkOJcEvg7eDs4O3hX+Fe4V7hQOFfcNuFM4VPhT
+FV4VjhWuFM4VPhTeF34XbhdeFr4WrhaeFr4WrhauFw4XfhceGP4Y7hjeGD4
YLhgOGe4Z3hnOGS4ZHhkOGS4ZHhkeGb4ZrhmOFi4WHhYOGq4anhq+Ft4XDhc
uFk4WvhZOEm4SXjJOs6blXD+zJ1zZ/Bm8GdwZ3BicGPwYnBicGPwYvBg8GFw
YfBg8GFwYfBa8FtwW/Ba8FtwW3CkcKXwpHCkcKXwpPB78HxwfHB0cHXwdHBu
cG/wbn89M+eb4Zrhq+Gt4azhPOE+4T3RKUO3DL0y+FV4VjhW+FJ4UzhT+E94
UDhQdN/QgUP/Db0z9M/QPYNbg2ODX0PHB10f9Hzgw+HF4cTRnUGHBv0ZODS4
NHg0ODS4NHg0eF34XbhdeF34XbhdeF34XbhdeF34XbhdOFu4W3hbCedsp137
427hbeFp4WvhauFp4WvhauEY4RrhGeEY4RrhGeGm4Kjgp+Cx4bPhsuEn4Snh
KOEY4RrhGeEY4RrhGeEP4RHhEOHS4dTh0+HP4dHh0OHN4M/gzuDN4M/gzuDN
4M/gzuAe4SDhH+Ee4SDhH+GB4YPhgus4Dxze6397Xvh/9ADQAYD/Rw8AHQD4
f/QA0AGAl4afhpuGN4Y/hjuGN4Y/hjuGD4QXhBOEr4O3g7OD84f7h/eHR4VP
7cG5VLwHh8ODv0M3AR0F9BPQTUBHAf0E9A7QP0D3AL0D9A/QPUDvAP0DdA/g
xuHI4cfhDOEO4Q3hmeGb4ZrhzOHO4c3h7eHv4e7hzOHO4c3hZuFo4WfhD+ER
4RDhuuG84bvhe+F94XzRR0AvAZ0EuEc4SPhH+FJ4UzhTdJPRUUY/Ga4VzhW+
Fa4VzhW+Fd1ndKDRf0ZnGd1l9JbhLeEv4S4rvhuEeYyWUZJ47cPrDSXkX15n
PGdgKZVyfhWe1ZlzrPCr8KxwrDhPEecr4lxFnN+J8zxxjidcMZwxfDEcPlw+
PD788LV/5u7gh+GJ/zpizg/DE8MRo4OALgJ6CHD1cPbw9egdoH+A7gG6Bugc
oG8ginok27GTz9oNbPwwo2MKK43x1qTnNbQYPpn7e1zB/T2u4RxrLedY73GO
Ne7JEcUsZxlVFe25vjqjhEZbLBQNjy4mq63jRWNz6lnKf/uGzevjylZMSxkc
MbGITk6RX5mH6tl3401DvkkC2Ma12funVBTTWO45ZCn3HLKBO79+sGdx25UO
Mez6KGNN48YadrzpVlrzUT5JDW+H6moVMstr2prfyxJZ+03ZnQx96umQZczL
+VFvmO+x7b7jJ0pZ4a5nU3+fb5Xbbt2Eg5TKGqbNzBrRuYadNd2is0tXQKOn
bbA5kF3JLnk+G9xsHsc+aRq1jMyV76/Hz9VZQBVMZtNscedTDhMfMXRPa1dL
yQ9WVp6wz2abVFdE9BghYg+eK//qf0VMo67107Z8+Z4NLGhe0jVExDK7LV68
z1hM5x9/C+5klc5cXnf9JO4lYrt/9jh7zUBCk47NH+HbwGeizNMXbE6GsyK/
sRMK/Gtohe++Jdd78tm49vZbkm0y2cv1FtsMl9aQAe/F9kCPanb6dPsO0TeL
WP2TVWdVQ6S0gtePn+knYq0brBOcr/uzU1ptKfNOSsi5IN5/WaqQNTfXGCp5
pLN1kXfC0+zk11ffi6d+n4c3sMTpsY5jPtvSo7nDpGsS6jr2uGbfjGo2681y
YcSbErb550STy20SCp1ycql7koSVXgosNHF4xMTTB0zn7xGRu7bs3kqpmI33
PX73144U9rbz8bT0EBFp3B8T5qwsYme3D+nSPieH7U9bPfXzfjF1sxYf/6HL
Z53tFqRvXFTIjsR22b9DKKHJE0L9MmKKSXxgmnHxBRmNaJvqvYBX8vd8I8wt
fuXmFc1Cx2jUbqlhWupmLlXJV9nmluBxSacElLX03KJATylrtjbYNKgwgW1x
UBD8Psewm7RXjOZdMavW1FzrqpbFLD+3hHdcJKKoo81Ho29W0dolg5rbX5DQ
oJ41ihVJFWTq89Zd4Wglhb28qfz7XCm7w0Xn3DRK6GbkGcW378rpq/Gt3bPH
yChUfYKxRFpIw7g58jBurvwRN0/+91w07pw0nI/WNNdL4/d5k7TvRLfm06HM
INU4UderinBuoiY3l43zE3GOGs5Vw3lqX61WZMf2ENPBenGI8SUBZT9XKkr4
Lr//98lV/n1upenjt6MslwewyNq15Rq2FbTENTUj46yMOXfS8HB5n8CUG86E
u63nkWhY280DWlJyOKj36NWtakof9uDRWmEJjbSyNvx9ntmeHV7t7JbyyWxC
n++/zzV7vu+tukT+uZdyw/NGxWz5v7eH3qxDMWWk5zh8hFNVHdv9NvN6qPAJ
K30d7vTDpoyW7l6x6ve5bj5tKhpC3Sq623tf6I55xVScaDYm2Kiebe0U2Hd8
j/ss3bnVdqBbCRkeVd/wsK6GjJfXz3jRVk4nbAYEhGUWUSY3J4dzSHD+yFRu
/sySm0cL4+bQov853wfnsLzpPldsrVRKFseH7F+tLaX1jVFL0n6fqzqtfemC
8DJmVJ9rvOp2Lqv+MbAwbUUt4fwknKeEc5TshqaNSvVLYq+OeZiqmMUzZ9eu
LrnrG/+eS4RzinA+Ec71wTk/ON9nODe/iPNwcA5Oh7u9rPo0V5H//tNTV+lJ
yHq7Kc/7ciV5c+f4RHPn+ARw5/i4nX/g5d++lFRM7PxvtsuhZ6tTIzK/1dKX
Pl3GuC+qJoVBkyK0FCU0YOHgjC5GlX/PecK5TzjvCeeC4JwQnA+C8zxCuect
ONejlTs3awZ3jhbOz1Iy1B7rpyhhL9/ZbNU14rNOfTyzGw1K6OHs4z3VTkpZ
lXXXSO8DfLbN9qXo93kreaamA/KWSdglr35NB5mALVxycUCQWh7d5t6XvODe
n9zk3ptI1vR0cjGIZ0WnO72xmC5jq0+qHtfh8+gb1xceyb2Xc+Tex90f6ui9
zLyCTVGc1j89pYj53e05qCK7hmZP6NXwu6v7bcfOz+lFMppQZnZ3iOD/94nb
/pmrX3NtvEktT0bHK35m+vjlUnzlomcpCyroxcEx/9MRPjvh+/90hS2r75/8
3ROeWXdrn+anWhq6Z87DzTdzqHeXPk7SVyU0QT/G9Xd/v9lY2ndOt0Kq2rZm
7e8O/1uuA1jLdQFduB6gN9fjG871+aK4543o/aH/h+7fI66H1ZT0Z3+JLlYl
1xvqtOV/94v43HMZ9M+ucc9n0A86wvWE1LmO0P+1zhkn/mgc35bCTi7Tt+j+
o4DFNu6/m+JUT91Lpnc6uD6ZXTfhx9+5V8m0h90dMEt+XU06k+/jHJbIXCp+
1j5I4DO7VbumHXWoIbOpyrqK8n1WeunZmsPmImb8ZdaLXzsl1Cl5xaT3uox5
RYndsw9I2NruAUELrUW0bfWaa10PxrE+F0IdLD5Kmcf4bIdZ0QKK/T+8z9fD
95V1KiLYe9M2+1GPa9kR7buG7plVpC+qmr1mRTgrNn/U7e2IOlbfca/a2w8V
dCqzsEirPpRdNouIs75dx6qPnNE4ZlZObxZv7TYrLIRdy/jqb9FQx8KVLvVj
raVUM0bv0nzPYLbS4EbEnkn1LHSq4tGe+SXk9s/1jC5xcceK+APL81islbBn
ZbcKtnmTr+7dfBmFjDczcovMYfMWfeo94z2P3f3WRRjVu4by1OaMnDAkm01c
ttjHf7mQBd6Ybjtym4R2x3nEHtr4noU3J44dNkrMdswdZyerEtGyLSck0vAM
NneXWglzlrATj63prHz9qfN/OKAr98pchv5gLDFzm17YMBnzHP6hXY9fPNrA
rQsNuXWiEbc+VNOyjZp2tZi1y1qqO+lgNVvwJWdS1g0phQ+JKd46o5AVD3iW
oOHNZwquDgp55yQ058BGvaq2PPb60obv60cJ2fY0Bb9+r8Q0bqOF2ilJDvOK
MY+x0BUxo4mCW4ZLxSTlfq//v7rOPJzK9I3jRhsmkSKyZmmnn5rUiJ4m+RWZ
CUWyRRIabWgzDZnSxoQoy4nBaKJUJ0shPKJStrJvJ5wOjrWDQgr97i7321y5
rt+fua7e8z7P+3w/9/d+n+e+XxXUtT/qWuK7zfdddzZQR+PmvojzLXR7bL9v
3/QOcpv+luXzoYbG9SuECRy5dJaniUaTUQdh+o8w/UiisA9JMPbRiMO+Grux
n0Y99o9Yhf0k9mMfCXfsv5CK/RiYPgwy2NfgMNPnAPsbtGId/iWsy5fEevwQ
rOveh3XepVjfPQPre5l6X1Gs82VjnS1Td3sa622rsN6VqX/dgHWvLVgvKon1
o2ZYN8rUSbKwbjIX6yXDoy7OLF3WSRVdeftNZZ7R9SbyJY8/vCHVyuE73Y62
UdeYw6HL1UvotgqjdNnkdhJjP8ERz0l9zOi00Q8z4jnkaoy+XP6qSjK3/uDW
msEu4t9ucMCyhEekLngcVhprI9xwzc7y3XVkW6FSw1DGG/KDlIX3udftZGep
u4daYB25VzMurybWTERG2NJ2B9rJX/t09rRlt5BkjEd5GI+8MB5Z3VJsm+rV
QbRbyudcVGkmT/4RzL6p2EhSrjjLhsd0EkMLzjqDttfELSaf4zi1jozUCNb8
dreLJNxxKHjPqiNsWRuJbdb1pFPXLPm6TRdZPVKdq+zIIdliO/58EFNDRNCP
ctCfvkNf+v/62zB9Wi7j+nLAdRV2wvf4QZhf10yWUQHM946S2qASmOe5r7Jc
PwIfvWfKx+vbPqGxElZDM4GT2yPPrJgi/pqGZMYatgEn9rx/7uYNfGDWZf2k
PifPXjrNYANPRVwCDy5Iz6drLJZKWwJXD9vnyq8AjlxZX5wv8bCcWhf6NScB
T65IvijWAN32NRUom4COK618BypBv14afRZf+Ou+5fZbJenHNOdy3tIB4PBn
Vs6aUOBOXt6pzADg0AddIz1t4E+FSlaHCOg878Z41EnQ/ZEB962NoPdTTQU+
LNCn6uHUEA/Qq/9dWdEe0GkR+rrxqxO+rgR93fA7w5+Kge9LY00lFTQozay0
79oEnLfc7eoyB7gm7XDTtwU4t3HO30JDwLc1z3hLfgaOJLKjz4kKVdH+jJwI
WeDJ3j1C2Wmgf3dDwzmuwAMFUd51ceMOMtao+WCvC4dKvV+wuSS4lt65kDzj
jnoXeYi+UQh9Yy/6xuLCoBlN3fVk3oFdTmuz+OTZyu0n9JW4RLKy+8JnWDd3
c3UjfWAdJWbMdNCB9cOsD2a9DOI6kasqe+4O8el288nkKIhXT5PSPq2HOCX6
jq+aBly+5FtRuji9iHIiNnsFAJ+DD522NAcO3g320L8PXLxeNvWtNfAwzjNx
ZcPfXOrkeOFaC6+SaqVHNIkWdpDF6CfnoZ9ch34y4El84Hh/M1mmr3psAfAk
ToVWfn+xmYidUvGJBJ2cX+S7UAp0s+VDp+te0MuFfT78DaATzpnb3ddAN+4J
Aj9n0MuNQFmrpaAHlyQPqXDQx1GlI7YFoAtXKbtcG14DEVYRnFTkdRGtnp5F
QX3VX7/X/GjS95qrL5ndWgJx123QWewIxGH+g10p18v+/T7ygknfRw4z2PBf
ReCFQ3yDtS3ww2CHX0M+cKP8vFLjM4jTYv/INVGI20kGt3bVQLxm+Mjw0hc5
KXlu3i9f+HJUjXt6GHhT6e03XxU4E9T1SeEQxPWrwU7yFyHOB5+31D8L8X1y
PwGGq1ltZ/7jDvFe3FrLPgbif1naTdMyiPsSyNkm5K4p8nZUcsuhQvlu0m/0
sfba3kpi+9Sy4qagkbDOZ1lUZbZT86Lf9Z41cin7+9C085A3yR1iGeucbacK
P2tbnuC30oZDmTnLWsE/Pp3wc+cuftvv9MjATwlRyj2kP84vrrCggohF23Vp
y9QRmZCBTdwFPSSiaMXz8FM15IrxGN+EVUXcykzHHM92UL3Ao1azP3HpJ0+e
d8NgJSkfn8WVE+6ggqSqwYiVPOqZyHnl8LycGLWG9w99rKYRti/kDcHfsaz1
/V+Cr9thrtStbFxOF015dCB8Ux3V++Nl7ohZD4lUnvc2wj2D6ukZ/zgykE3N
d805XXtD8PX87Sk8fzsNz9++wDg3fVJfCy/M63Qwz7uH+Z2CcG9gSBuPpq6T
TZAZbKfT5i2/dE6+irCdB0o/Q3yqThEuMIB4FdYazlsGcaq1Ycsty7HnNNHE
+KPFaCuN3P/bwHRLPknB+P0rxvN8jOOx41NMWKAr9g2OSTvojJWUuFii8N98
0xPvi4334ys4XqcBz9VJZXFXDjxnx73Gq+X7GomHS+D2cHgeq6bpKLHg+cgW
rjG3gOdyUuUHxTTgzqvi4H1xwCFHtfixOODPEfQNjI9g/MPDg5KGPhvr6A3Z
lYPVW8rpi459Gn+Z95DVvbdXCT3Opl69zt5ZGzPoiqWv/WfdFHz1GYzvYPyG
dZhkehjEY5sgcZMlcRxS2pngIzfURaKuqNdGwfoIDU9paoH10tA9TLfCOonH
fPMR5ptszDed0a8Eo38pQd/CPFfmOTPPVwZ5xPCJ4RLDWYa7b5G3b07ca5WH
9aBlVRE5baCZDEcrFM8FXjXuTJ6vbsAjsSNiAb7abcS25Zdqmz85pKfIKrA3
u4luZCdE7hfl0+vJ1K5YpIX4HAtoWiHeRc3HlAd7q/Lpj05Dox9HuMTEO6N5
MXBcQ7C9lg9cn7Xs2MZtwPPjofXRTnBd/kKW93T4HfWddvfG4fpT7G08HoA+
/9D1EOsEvUoP5+i7g043dNQnSYJ+bGar9uwBPb2/nWpdBzrKfJx8NBL007Tc
Wmk+6Cm4/oWdHeioJNOnxwZ8TH/d1bFe0WZyVHAr+DP4mfhE7rUvOo8w26H5
RfehpYWqX/TuJzklWQl4usZBotwK+BozWsUNBK4yvq0WfVwO+rfTeA7DDM9l
aOF5DO/yjrzZoJO8VuF7AaAbGa3UuWmglyTcL/DH/QJd3C9g8pOwSd9P0fOe
vyIf5lGwnq+8CeY1Lr7DtwXmUz22/+SvkCc0vZTujoS8QWnb2DRPyBcWBaeL
t0k/orsXS95fHdJJNdQSL/v3vyHtdhP57FrZiXw2BfPZYTznIDFr4pyDKZ5z
eIw+j/F9jN9jxumH49bE8Yrj/x/C6zHXUcP8oQvzibOYR7zFvLdh0vmEenzP
vwHf82vie35mvpj5W4fzxrbZLa8D49w/uivyLoxbicPSOQfjXYjjLMNxp+J4
C3FfdSxuYl/1Ne6r2iPfuU++zd/d0GdH23+bv2/E+2vA+2XuUwjfl5WgzypC
fzWOv/ccf5/53all0b36oB/d4L6DLjkQUnUPLygHHaXrtzd6jLXS7JcjY6XA
UU3VoYzxHXzihX1IpthM9CEZD5noQyKM//Zk+pTg3zk4v30432E4z0yfTD7u
LwTh/sLajCM87U299HeRzYlXH7Hpd2csHTiX6sn/AJ0TQlY=
     "]], {}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  AxesStyle->Directive[
    GrayLevel[0], 
    AbsoluteThickness[0.2]],
  BaseStyle->Automatic,
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  LabelStyle->{FontFamily -> "Times"},
  Lighting->{{"Ambient", 
     RGBColor[0.312, 0.188, 0.4]}, {"Directional", 
     RGBColor[0.8, 0, 0], 
     ImageScaled[{2, 0, 2}]}, {"Directional", 
     RGBColor[0, 0.8, 0], 
     ImageScaled[{2, 2, 2}]}, {"Directional", 
     RGBColor[0, 0, 0.8], 
     ImageScaled[{0, 2, 2}]}},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{{0, 3}, {0, 3}, {-0.9999959302449705, 0.9999926583554124}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8094148282077646`*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"c0b1046f-d002-4299-9afa-56df2fc3cd19"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:9762\:677f", "Section",
 CellChangeTimes->{
  3.809414836441718*^9},ExpressionUUID->"d2b3e30d-bb9f-4284-9ee7-\
978e3738d6bd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"class", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "\"\<A\>\""}], ",", 
     RowBox[{"2", "\[Rule]", "\"\<B\>\""}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8094148390677366`*^9, 3.8094148617879972`*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"72c26778-19e4-4289-bd6d-2be35d9303dc"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Numerical\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"A\"", "\"B\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Numerical\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"A\"", "\"B\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 2, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 2729918768343498454]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 2, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {1.5}, "Method" -> "Naive", "VectorLength" -> 1, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {1.5}, "StandardDeviation" -> {0.5}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Model" -> 
                Association[
                 "Matrix" -> {{1.}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.5}, "StandardDeviation" -> {0.5}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 1, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.00937, "MaxTrainingMemory" -> 67528, 
                  "DataMemory" -> 176, "FunctionMemory" -> 22200, 
                  "LanguageVersion" -> {12.1, 0}, "Date" -> 
                  DateObject[{
                    2020, 9, 18, 18, 47, 42.7394163`9.383403461233348}, 
                    "Instant", "Gregorian", 8.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 1, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {12.1, 0}, "ID" -> 
             1606623927450839390]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Mean" -> {1.5},
              "StandardDeviation" -> {0.5}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 7146872191784791279]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 502710876449789003]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["A" -> 1, "B" -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 0}, "ID" -> 7950175369746017167, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 0}, "ID" -> 8873049734568431808]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association["A" -> 0.5, "B" -> 0.5]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> RawArray["Real32",{{-10.534727096557617`}}], "Biases" -> 
           RawArray["Real32",{0.015481424517929554`}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 1, 
           "$InputDimensions" -> {1}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.1.4", "Unstable" -> False]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 1, "Type" -> "NumericalVector"], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
         False, "Missing" -> "Allowed"]], "Method" -> "LogisticRegression", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.00001, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[395681], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.1396261`6.596511601084617, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.519866962974665, 0.1694496377323704], 
         "Accuracy" -> Around[0.75, 0.3061862178478973], "EvaluationTime" -> 
         0.0003981071705534969, "TestSize" -> 2, "ModelMemory" -> 9240., 
         "ModelUtility" -> -0.10212372215221377`, "TrainingSize" -> 2, 
         "TrainingTime" -> 0.02167470353815779, "TrainingMemory" -> 
         70178.66666666666, "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
           Around[0.5198669726508099, 0.23963796882358632`], 
           Around[0.51986695329852, 0.23963798281706544`]}, "AccuracyHistory" -> {
           Around[0.75, 0.4330127018922194], 
           Around[0.75, 0.4330127018922194]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           0.00001, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 2], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 140226599167568]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.519866962974665, 0.1694496377323704], "Accuracy" -> 
              Around[0.75, 0.3061862178478973], "EvaluationTime" -> 
              0.0003981071705534969, "TestSize" -> 2, "ModelMemory" -> 9240., 
              "ModelUtility" -> -0.10212372215221377`, "TrainingSize" -> 2, 
              "TrainingTime" -> 0.02167470353815779, "TrainingMemory" -> 
              70178.66666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5198669726508099, 0.23963796882358632`], 
                Around[0.51986695329852, 0.23963798281706544`]}, 
              "AccuracyHistory" -> {
                Around[0.75, 0.4330127018922194], 
                Around[0.75, 0.4330127018922194]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0003981071705534969, "MeanCrossEntropy" -> 
             Around[0.519866962974665, 0.1694496377323704], "ModelMemory" -> 
             9240., "TrainingMemory" -> 70178.66666666666, "TrainingTime" -> 
             0.022108197608920944`], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6931471805599453, 0.1170476946566248], "Accuracy" -> 
              Around[0.5, 0.33071891388307395`], "EvaluationTime" -> 
              0.0011726169411961107`, "TestSize" -> 2, "ModelMemory" -> 
              14656., "ModelUtility" -> -0.3763141136667907, "TrainingSize" -> 
              2, "TrainingTime" -> 0.007398712713095852, "TrainingMemory" -> 
              53154.666666666664`, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6931471805599453, 0.16553043722790364`], 
                Around[0.6931471805599453, 0.16553043722790364`]}, 
              "AccuracyHistory" -> {
                Around[0.25, 0.25000000000000006`], 
                Around[0.75, 0.4330127018922194]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0011726169411961107`, "MeanCrossEntropy" -> 
             Around[0.6931471805599453, 0.1170476946566248], "ModelMemory" -> 
             14656., "TrainingMemory" -> 53154.666666666664`, "TrainingTime" -> 
             0.00754668696735777], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6931471805599453, 0.1170476946566248], "Accuracy" -> 
              Around[0.5, 0.33071891388307395`], "EvaluationTime" -> 
              0.0003778809218869826, "TestSize" -> 2, "ModelMemory" -> 5712., 
              "ModelUtility" -> -0.3598549325727721, "TrainingSize" -> 2, 
              "TrainingTime" -> 0.005011872336272719, "TrainingMemory" -> 
              67706.66666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6931471805599453, 0.16553043722790364`], 
                Around[0.6931471805599453, 0.16553043722790364`]}, 
              "AccuracyHistory" -> {
                Around[0.25, 0.25000000000000006`], 
                Around[0.75, 0.4330127018922194]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0003778809218869826, "MeanCrossEntropy" -> 
             Around[0.6931471805599453, 0.1170476946566248], "ModelMemory" -> 
             5712., "TrainingMemory" -> 67706.66666666666, "TrainingTime" -> 
             0.005112109782998174], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5654407746184476, 0.1478331014478076], "Accuracy" -> 
              Around[0.75, 0.3061862178478973], "EvaluationTime" -> 
              0.0003981071705534969, "TestSize" -> 2, "ModelMemory" -> 6240., 
              "ModelUtility" -> -0.1739714421305084, "TrainingSize" -> 2, 
              "TrainingTime" -> 0.003981071705534968, "TrainingMemory" -> 
              48826.666666666664`, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5654407746184476, 0.20906757703516712`], 
                Around[0.5654407746184476, 0.20906757703516712`]}, 
              "AccuracyHistory" -> {
                Around[0.75, 0.4330127018922194], 
                Around[0.75, 0.4330127018922194]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0003981071705534969, "MeanCrossEntropy" -> 
             Around[0.5654407746184476, 0.1478331014478076], "ModelMemory" -> 
             6240., "TrainingMemory" -> 48826.666666666664`, "TrainingTime" -> 
             0.004060693139645667], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7005628638205471, 0.13903751426547736`], "Accuracy" -> 
              Around[0.5, 0.33071891388307395`], "EvaluationTime" -> 
              0.003162277660168379, "TestSize" -> 2, "ModelMemory" -> 94624., 
              "ModelUtility" -> -0.49192269755712237`, "TrainingSize" -> 2, 
              "TrainingTime" -> 0.013675813386831489`, "TrainingMemory" -> 
              137773.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6393693356557089, 0.17404706906870063`], 
                Around[0.7617563919853854, 0.17918579614824856`]}, 
              "AccuracyHistory" -> {
                Around[0.75, 0.4330127018922194], 
                Around[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.003162277660168379, "MeanCrossEntropy" -> 
             Around[0.7005628638205471, 0.13903751426547736`], "ModelMemory" -> 
             94624., "TrainingMemory" -> 137773.3333333333, "TrainingTime" -> 
             0.013949329654568118`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6714077717528146, 0.1180528064747919], "Accuracy" -> 
              Around[0.75, 0.3061862178478973], "EvaluationTime" -> 
              0.00046682721260268026`, "TestSize" -> 2, "ModelMemory" -> 
              9240., "ModelUtility" -> -0.32933624991418675`, "TrainingSize" -> 
              2, "TrainingTime" -> 0.010863084705980556`, "TrainingMemory" -> 
              64173.33333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6714380548753286, 0.16694793136439703`], 
                Around[0.6713774886303008, 0.1669558179147183]}, 
              "AccuracyHistory" -> {
                Around[0.75, 0.4330127018922194], 
                Around[0.75, 0.4330127018922194]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00046682721260268026`, "MeanCrossEntropy" -> 
             Around[0.6714077717528146, 0.1180528064747919], "ModelMemory" -> 
             9240., "TrainingMemory" -> 64173.33333333333, "TrainingTime" -> 
             0.011080346400100166`], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6931446754623267, 0.11704769467002869`], "Accuracy" -> 
              Around[0.75, 0.3061862178478973], "EvaluationTime" -> 
              0.0003981071705534969, "TestSize" -> 2, "ModelMemory" -> 9240., 
              "ModelUtility" -> -0.3598518674885163, "TrainingSize" -> 2, 
              "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
              62861.33333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6931446794893469, 0.16553043724679856`], 
                Around[0.6931446714353066, 0.16553043724692043`]}, 
              "AccuracyHistory" -> {
                Around[0.75, 0.4330127018922194], 
                Around[0.75, 0.4330127018922194]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0003981071705534969, "MeanCrossEntropy" -> 
             Around[0.6931446754623267, 0.11704769467002869`], "ModelMemory" -> 
             9240., "TrainingMemory" -> 62861.33333333333, "TrainingTime" -> 
             0.00810214799418767], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5226717496694426, 0.16802112694412652`], "Accuracy" -> 
              Around[0.75, 0.3061862178478973], "EvaluationTime" -> 
              0.0004395340777571273, "TestSize" -> 2, "ModelMemory" -> 9240., 
              "ModelUtility" -> -0.10666252804231802`, "TrainingSize" -> 2, 
              "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
              70146.66666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5226754641146133, 0.2376150916012672], 
                Around[0.522668035224272, 0.23762042135145406`]}, 
              "AccuracyHistory" -> {
                Around[0.75, 0.4330127018922194], 
                Around[0.75, 0.4330127018922194]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0004395340777571273, "MeanCrossEntropy" -> 
             Around[0.5226717496694426, 0.16802112694412652`], "ModelMemory" -> 
             9240., "TrainingMemory" -> 70146.66666666666, "TrainingTime" -> 
             0.03225523213371747], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5199131751474937, 0.16942601081313857`], "Accuracy" -> 
              Around[0.75, 0.3061862178478973], "EvaluationTime" -> 
              0.0003981071705534969, "TestSize" -> 2, "ModelMemory" -> 9240., 
              "ModelUtility" -> -0.10219863812292274`, "TrainingSize" -> 2, 
              "TrainingTime" -> 0.019952623149688785`, "TrainingMemory" -> 
              69912., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.5199132511874066, 0.23960450733387859`], 
                Around[0.5199130991075809, 0.2396046172875334]}, 
              "AccuracyHistory" -> {
                Around[0.75, 0.4330127018922194], 
                Around[0.75, 0.4330127018922194]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0003981071705534969, "MeanCrossEntropy" -> 
             Around[0.5199131751474937, 0.16942601081313857`], "ModelMemory" -> 
             9240., "TrainingMemory" -> 69912., "TrainingTime" -> 
             0.02035167561268256], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.693122132973278, 0.11704769599664791`], "Accuracy" -> 
              Around[0.75, 0.3061862178478973], "EvaluationTime" -> 
              0.00037081403570794394`, "TestSize" -> 2, "ModelMemory" -> 
              9240., "ModelUtility" -> -0.35982038049859966`, "TrainingSize" -> 
              2, "TrainingTime" -> 0.009999999999999998, "TrainingMemory" -> 
              62957.33333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6931221732325916, 0.16553043911688078`], 
                Around[0.6931220927139643, 0.1655304391290646]}, 
              "AccuracyHistory" -> {
                Around[0.75, 0.4330127018922194], 
                Around[0.75, 0.4330127018922194]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00037081403570794394`, "MeanCrossEntropy" -> 
             Around[0.693122132973278, 0.11704769599664791`], "ModelMemory" -> 
             9240., "TrainingMemory" -> 62957.33333333333, "TrainingTime" -> 
             0.010199999999999999`], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 4], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6931471805599453, 0.2340953893132496], "Accuracy" -> 
              Around[0.25, 0.35355339059327384`], "EvaluationTime" -> 
              0.000501187233627272, "TestSize" -> 1, "ModelMemory" -> 19952, 
              "ModelUtility" -> -0.39200389604467545`, "TrainingSize" -> 2, 
              "TrainingTime" -> 0.025118864315095794`, "TrainingMemory" -> 
              79016, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6931471805599453, 0.16553043722790364`]}, 
              "AccuracyHistory" -> {
                Around[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000501187233627272, "MeanCrossEntropy" -> 
             Around[0.6931471805599453, 0.2340953893132496], "ModelMemory" -> 
             19952, "TrainingMemory" -> 79016, "TrainingTime" -> 
             0.02562124160139771], "Index" -> 11]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 11], 
        Association["ID" -> 140222304200272]], "MaxTrainingSize" -> 2, 
      "PreprocessorEvaluationTime" -> 5.6095703125`2.*^-6, 
      "PreprocessorMemory" -> 39312, "InputDimension" -> 1, "OutputDimension" -> 
      1, "BaselineLogProbability" -> -0.6931471805599453, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.8094436635143422`17.333436544492333*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 2, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.5205214, "ExperimentCounts" -> 21]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 140235189102160]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2}, "ID" -> 
           7806654962102425149]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 0.8479119, 
      "MaxTrainingMemory" -> 734256, "DataMemory" -> 264, "FunctionMemory" -> 
      173856, "LanguageVersion" -> {12.1, 0}, "Date" -> 
      DateObject[{2020, 9, 18, 18, 47, 43.5672018`9.391734539182963}, 
        "Instant", "Gregorian", 8.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8094148563724356`*^9, 3.8094148636430016`*^9}},
 CellLabel->"Out[89]=",ExpressionUUID->"b48ef0c5-6a96-436a-a1b9-440e4f91687f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"class", "//", "Information"}]], "Input",
 CellChangeTimes->{{3.8094148646064234`*^9, 3.8094148723646827`*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"2f82b390-77a4-44fd-bcec-38ed216777f9"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12],
         FrameMargins->{{10, 5}, {-4, 2}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.96, 0.96, 0.96],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Data type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], "\<\"Numerical\"\>"},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",", "\",\"", "\"A\"", "\"B\""},
               "RowWithSeparators"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{
                InterpretationBox[
                 RowBox[{"(", 
                   TemplateBox[{"75.", "31."}, "Around"], ")"}], 
                 Around[75.`3., 30.6186217847897275135`3.]], "\"%\"", 
                "percent", "\"Percent\""},
               "QuantityPostfix"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"LogisticRegression\"\>",
                StyleBox[
                 TagBox[
                  
                  GridBox[{{"\"L1Regularization\"", "0"}, {
                    "\"L2Regularization\"", "0.00001`"}, {
                    "\"OptimizationMethod\"", "\"LBFGS\""}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                   False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                   FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                 "Verdana", StripOnInput -> False]],
               Annotation[#, 
                Style[
                 
                 Grid[{{"L1Regularization", 0}, {
                   "L2Regularization", 0.00001}, {
                   "OptimizationMethod", "LBFGS"}}, Alignment -> Left, Frame -> 
                  All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                  Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"2.03`", 
                
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}], "milliseconds per example", 
                FractionBox["\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"181.`", 
                
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}], "examples per millisecond", 
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.5198669629746649479`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1694496377323704006`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.1809676875099241466`3.",
                   "\", \"", "0.8587662384394056936`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.1809676875099241466`3., 
                  ", ", 0.8587662384394056936`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Model memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"176.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"2", "\"examples\"", "examples", "\"Examples\""},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "847.`", "\"ms\"", "milliseconds", "\"Milliseconds\""},
               "Quantity"]}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 11, FontFamily -> 
          "Microsoft YaHei UI", NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[0.8], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Background->GrayLevel[1],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.8094148730269117`*^9},
 CellLabel->"Out[90]=",ExpressionUUID->"0ccfb286-9060-41da-afbd-52841eceb342"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:4e0d\:540cCell", "Section",
 CellChangeTimes->{{3.809414898886779*^9, 
  3.809414904809944*^9}},ExpressionUUID->"b71cc91d-e7c5-4a9d-b5d7-\
53e3685d8a4f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}]}], "}"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.8094149135356703`*^9, 3.8094149216938515`*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"1501c075-d5b7-4e46-8ef5-50cb1045ebb3"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2"},
     {"3", "4"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8094149219292126`*^9},
 CellLabel->
  "Out[92]//MatrixForm=",ExpressionUUID->"70fedb47-e094-4fd2-b8fe-\
53afc3d6e37c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}]}], "}"}], "//", "TeXForm"}]], "Input",
 CellChangeTimes->{{3.8094149315275183`*^9, 3.809414937261224*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"189c9fa1-4e1a-4773-b9ad-ca6e5e4d0911"],

Cell["\<\
\\left(
\\begin{array}{cc}
 1 & 2 \\\\
 3 & 4 \\\\
\\end{array}
\\right)\
\>", "Output",
 CellChangeTimes->{3.8094149375085635`*^9},
 CellLabel->
  "Out[93]//TeXForm=",ExpressionUUID->"8f502264-659d-4fe2-9fa2-47e73c783d66"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"<<", "M2MD`"}]], "Input",
 CellChangeTimes->{{3.8094150750466986`*^9, 3.8094150865597816`*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"d48528f2-bcf0-4171-a537-a25fd13d481d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MDExport", "[", 
  RowBox[{
  "\"\<G:\\\\GitHub Local Repository\\\\Mathematica-Notebook-VersionControl\\\
\\nb2md-test\\\\exported.md\>\"", ",", 
   RowBox[{"EvaluationNotebook", "[", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.809415199921767*^9, 3.8094152199344482`*^9}, {
  3.809417598429639*^9, 3.809417598550316*^9}, {3.8094177266938143`*^9, 
  3.809417733753972*^9}, {3.8094179370716085`*^9, 3.809417940135459*^9}, {
  3.8094180506968384`*^9, 3.8094180536120467`*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"9bada00d-d459-4c9e-aa12-e19453ae5938"],

Cell[BoxData["\<\"G:\\\\GitHub Local \
Repository\\\\Mathematica-Notebook-VersionControl\\\\nb2md-test\\\\exported.\
md\"\>"], "Output",
 CellChangeTimes->{3.809415225099678*^9, 3.8094175995915327`*^9, 
  3.809417642541711*^9, 3.8094177378459997`*^9, 3.809417942813259*^9, 
  3.8094180551120005`*^9},
 CellLabel->
  "Out[103]=",ExpressionUUID->"7c023ab4-8bef-4101-8c84-185ab2a101c2"]
}, Open  ]],

Cell[BoxData["$UserBaseDirectory"], "Input",
 CellChangeTimes->{{3.8094236220219016`*^9, 
  3.8094236252929006`*^9}},ExpressionUUID->"0a379c42-a41e-4f1e-a3f6-\
8fce58062610"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8094238980398397`*^9, 
  3.8094238994222717`*^9}},ExpressionUUID->"eb7a239e-bc4b-42bc-a12c-\
2a66ec1534e1"],

Cell[BoxData[
 RowBox[{"$ScriptCommandLine", "+", "1"}]], "Input",
 CellChangeTimes->{{3.8094246976924524`*^9, 3.8094247014572926`*^9}, {
  3.809425457715948*^9, 3.8094254606496325`*^9}, {3.8094254946298757`*^9, 
  3.8094255001990657`*^9}},ExpressionUUID->"c9c8f12c-18e6-4113-a158-\
ad6c36afc24a"],

Cell[BoxData["NotebookGet"], "Input",
 CellChangeTimes->{{3.8094692436610384`*^9, 
  3.8094692523687468`*^9}},ExpressionUUID->"8428a784-36b2-43a1-a8c7-\
b6009f10efe3"],

Cell[BoxData["a"], "Input",
 CellChangeTimes->{
  3.809479583293174*^9},ExpressionUUID->"71e256e9-f207-4c55-8a38-\
c4f6747d18b6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetOptions", "[", 
   RowBox[{
    RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
    RowBox[{"NotebookEventActions", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<WindowClose\>\"", "\[RuleDelayed]", " ", 
       RowBox[{"(", 
        RowBox[{"a", "=", 
         RowBox[{"a", "+", "1"}]}], ")"}]}], "}"}]}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.8094795492412014`*^9, 3.8094796580723424`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"90a70c87-e4da-4570-8bb0-5e545979366a"],

Cell[CellGroupData[{

Cell[BoxData["a"], "Input",
 CellChangeTimes->{3.809479647474674*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"927a6324-c28d-45e1-9080-f7db73a180a9"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.8094796481289253`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"d11c5b8e-ed16-42f4-947d-7586811c0dea"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
NotebookEventActions->{"WindowClose" :> ($CellContext`a = $CellContext`a + 1)},
WindowSize->{949, 467},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"12.1 for Microsoft Windows (64-bit) (2020\:5e744\:670815\
\:65e5)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"cda57f69-5eab-4fab-b042-f3366e4a5a54"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 133, 3, 98, "Title",ExpressionUUID->"a4411ce1-3e37-49a5-b2c1-15bffd1c22a5"],
Cell[CellGroupData[{
Cell[738, 29, 173, 3, 67, "Section",ExpressionUUID->"8238c34c-7caf-4eb6-90a1-8456b8c740f5"],
Cell[CellGroupData[{
Cell[936, 36, 196, 3, 28, "Input",ExpressionUUID->"6601a62f-38ba-46e7-9b9e-0c06ad6c4baa"],
Cell[1135, 41, 149, 2, 32, "Output",ExpressionUUID->"cb46ebed-b440-43e0-97b8-66d91e34c3fa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1321, 48, 228, 4, 44, "Input",ExpressionUUID->"4af6181a-7809-4ec1-ab6a-4d8fdd2cf214"],
Cell[1552, 54, 201, 4, 32, "Output",ExpressionUUID->"7f2ec30e-5ab9-48ea-a951-6ca47dc0b66d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1802, 64, 157, 3, 67, "Section",ExpressionUUID->"da642f5d-f2ab-4e23-8fff-a25aa89a3747"],
Cell[CellGroupData[{
Cell[1984, 71, 319, 7, 44, "Input",ExpressionUUID->"9ec20c51-cf17-4e7c-a190-7785223240d5"],
Cell[2306, 80, 3664, 84, 237, "Output",ExpressionUUID->"0f498764-77e7-464a-9033-6d0d19ef5072"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6007, 169, 417, 10, 44, "Input",ExpressionUUID->"b9432938-895f-43d2-9dfb-0d727097fbaa"],
Cell[6427, 181, 32169, 548, 375, "Output",ExpressionUUID->"824bd5d7-6ece-412b-bdd8-2f5e1230b982"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38633, 734, 413, 10, 44, "Input",ExpressionUUID->"68f9cf86-4309-4a95-94be-7e8ee5defa76"],
Cell[39049, 746, 133012, 2185, 308, "Output",ExpressionUUID->"c0b1046f-d002-4299-9afa-56df2fc3cd19"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[172110, 2937, 133, 3, 67, "Section",ExpressionUUID->"d2b3e30d-bb9f-4284-9ee7-978e3738d6bd"],
Cell[CellGroupData[{
Cell[172268, 2944, 366, 8, 44, "Input",ExpressionUUID->"72c26778-19e4-4289-bd6d-2be35d9303dc"],
Cell[172637, 2954, 45953, 855, 65, "Output",ExpressionUUID->"b48ef0c5-6a96-436a-a1b9-440e4f91687f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[218627, 3814, 213, 3, 44, "Input",ExpressionUUID->"2f82b390-77a4-44fd-bcec-38ed216777f9"],
Cell[218843, 3819, 8964, 225, 311, "Output",ExpressionUUID->"0ccfb286-9060-41da-afbd-52841eceb342"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[227856, 4050, 161, 3, 67, "Section",ExpressionUUID->"b71cc91d-e7c5-4a9d-b5d7-53e3685d8a4f"],
Cell[CellGroupData[{
Cell[228042, 4057, 357, 9, 44, "Input",ExpressionUUID->"1501c075-d5b7-4e46-8ef5-50cb1045ebb3"],
Cell[228402, 4068, 622, 19, 61, "Output",ExpressionUUID->"70fedb47-e094-4fd2-b8fe-53afc3d6e37c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[229061, 4092, 352, 9, 44, "Input",ExpressionUUID->"189c9fa1-4e1a-4773-b9ad-ca6e5e4d0911"],
Cell[229416, 4103, 233, 10, 131, "Output",ExpressionUUID->"8f502264-659d-4fe2-9fa2-47e73c783d66"]
}, Open  ]],
Cell[229664, 4116, 198, 3, 28, "Input",ExpressionUUID->"d48528f2-bcf0-4171-a537-a25fd13d481d"],
Cell[CellGroupData[{
Cell[229887, 4123, 586, 11, 63, "Input",ExpressionUUID->"9bada00d-d459-4c9e-aa12-e19453ae5938"],
Cell[230476, 4136, 383, 7, 32, "Output",ExpressionUUID->"7c023ab4-8bef-4101-8c84-185ab2a101c2"]
}, Open  ]],
Cell[230874, 4146, 174, 3, 44, "Input",ExpressionUUID->"0a379c42-a41e-4f1e-a3f6-8fce58062610"],
Cell[231051, 4151, 156, 3, 28, "Input",ExpressionUUID->"eb7a239e-bc4b-42bc-a12c-2a66ec1534e1"],
Cell[231210, 4156, 297, 5, 44, "Input",ExpressionUUID->"c9c8f12c-18e6-4113-a158-ad6c36afc24a"],
Cell[231510, 4163, 167, 3, 44, "Input",ExpressionUUID->"8428a784-36b2-43a1-a8c7-b6009f10efe3"],
Cell[231680, 4168, 129, 3, 28, "Input",ExpressionUUID->"71e256e9-f207-4c55-8a38-c4f6747d18b6"],
Cell[231812, 4173, 522, 12, 44, "Input",ExpressionUUID->"90a70c87-e4da-4570-8bb0-5e545979366a"],
Cell[CellGroupData[{
Cell[232359, 4189, 148, 2, 28, "Input",ExpressionUUID->"927a6324-c28d-45e1-9080-f7db73a180a9"],
Cell[232510, 4193, 151, 2, 32, "Output",ExpressionUUID->"d11c5b8e-ed16-42f4-947d-7586811c0dea"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

